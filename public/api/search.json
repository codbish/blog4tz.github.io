[{"id":"b785373ff41b86c86fee988839b61307","title":"你好，欢迎到访团子的博客","content":"欢迎首位用户，安红红同学！\n","slug":"hello-world copy 3","date":"2022-11-30T16:07:07.903Z","categories_index":"","tags_index":"","author_index":"团子"},{"id":"1f8d1e15bde0d92144a385b911e17e2d","title":"节流和防抖的总结","content":"一、总结1、节流：本质上是对执行频率的限制，有节奏的在执行。(走A)2、防抖：本质上是对执行次数的限制，多次密集触发的情况下，只会执行一次。(回城)3、节流更关注”过程”，防抖关注”结果”。二、重点● 过程(限制频率) vs 结果。● 实际工作 https://www.lodashjs.com/\n","slug":"hello-world copy 2","date":"2022-11-30T16:07:07.141Z","categories_index":"","tags_index":"","author_index":"团子"},{"id":"84c5d95635333c1f19b7db5d1c2143cd","title":"箭头的缺点","content":"1、函数内部没有arguments2、不兼容call,apply,bind3、不能作为对象的方法4、代码难以阅读1、arguments函数内部没有arguments/* 1、函数内部没有arguments /function go(){    console.log(arguments)}const fn  = ()=&gt;{    console.log(arguments);}go();fn();2、不兼容call,apply,bindvar name = “window”;function go() {    console.log(this.name)}const fn = () =&gt; {    console.log(this.name)}go.call({ name: “vue” });fn.call({ name: “react” })//❌箭头函数不兼容call,bind,apply3、不能作为对象的方法/ 不能作为对象的方法 /var obj = {    name: “react”,    sayName: () =&gt; {        console.log(this.name)    }}obj.sayName(); //❌4、代码可读性差/ 代码可读性差 */var a =20;const fn = ()=&gt;a&gt;10? ‘正确’:’错误’;\n","slug":"hello-world copy","date":"2022-11-30T16:06:26.071Z","categories_index":"","tags_index":"","author_index":"团子"},{"id":"73a4f8512e04fe7927935c7418b949d7","title":"在前端页面调用api时的问题","content":"1.请求路径利用.env.development文件去实现url的统一化。代码\n.env.developmentVITE_APP_BASE_API =’http://localhost:3000&#39;\n2.在request文件夹内，新建index.js文件，实现拦截器，用于封装所有请求的通用功能（get,post,patch,put..）import axios from ‘axios’\naxios.defaults.baseURL = import.meta.env.VITE_APP_BASE_APIaxios.defaults.timeout = 3000/**\n\nhttp request 拦截器\n/axios.interceptors.request.use(  (config) =&gt; {config.data = JSON.stringify(config.data)\nconfig.headers = &#123;\n  &#39;Content-Type&#39;: &#39;application/json&#39;,\n&#125;\nreturn config\n\n  },  (error) =&gt; {return Promise.reject(error)\n\n  })/**\nhttp response 拦截器\n/axios.interceptors.response.use((response) =&gt; {  if (response.data.errCode === 2) {console.log(&#39;过期&#39;)\n\n  }  return response},(error) =&gt; {  console.log(‘请求出错：’, error)})\n\n/**\n封装get方法\n@param url  请求url\n@param params  请求参数\n@returns {Promise}\n/export function get(url, params = {}) {return new Promise((resolve, reject) =&gt; {  axios.get(url, &#123;\n  params: params,\n&#125;)\n.then((response) =&gt; &#123;\n  landing(url, params, response.data)\n  resolve(response.data)\n&#125;)\n.catch((error) =&gt; &#123;\n  reject(error)\n&#125;)\n\n})}\n\n/**\n封装post请求\n@param url\n@param data\n@returns {Promise}\n/\n\nexport function post(url, data) {  return new Promise((resolve, reject) =&gt; {axios.post(url, data).then(\n  (response) =&gt; &#123;\n    //关闭进度条\n    resolve(response.data)\n  &#125;,\n  (err) =&gt; &#123;\n    reject(err)\n  &#125;\n)\n\n  })}/**\n封装patch请求\n@param url\n@param data\n@returns {Promise}\n/export function patch(url, data = {}) {return new Promise((resolve, reject) =&gt; {  axios.patch(url, data).then((response) =&gt; &#123;\n  resolve(response.data)\n&#125;,\n(err) =&gt; &#123;\n  msag(err)\n  reject(err)\n&#125;\n\n  )})}\n\n/**\n封装put请求\n@param url\n@param data\n@returns {Promise}\n/\n\nexport function put(url, data = {}) {  return new Promise((resolve, reject) =&gt; {axios.put(url, data).then(\n  (response) =&gt; &#123;\n    resolve(response.data)\n  &#125;,\n  (err) =&gt; &#123;\n    msag(err)\n    reject(err)\n  &#125;\n)\n\n  })}//统一接口处理，返回数据export default function (fecth, url, param) {  let _data = ‘’  return new Promise((resolve, reject) =&gt; {switch (fecth) &#123;\n  case &#39;get&#39;:\n    // console.log(&#39;begin a get request,and url:&#39;, url)\n    get(url, param)\n      .then(function (response) &#123;\n        resolve(response)\n      &#125;)\n      .catch(function (error) &#123;\n        // console.log(&#39;get request GET failed.&#39;, error)\n        reject(error)\n      &#125;)\n    break\n  case &#39;post&#39;:\n    post(url, param)\n      .then(function (response) &#123;\n        resolve(response)\n      &#125;)\n      .catch(function (error) &#123;\n        // console.log(&#39;get request POST failed.&#39;, error)\n        reject(error)\n      &#125;)\n    break\n  default:\n    break\n&#125;\n\n  })}/**\n查看返回的数据\n@param url\n@param params\n@param data\n/function landing(url, params, data) {  if (data.code === -1) {  }}\n\n3.对应事件写对应请求import http from ‘./index’export default {  // 请求示例  /* getBanner() {    return new Promise((resolve, reject) =&gt; {      http(‘get’, ‘/banner’).then(        (res) =&gt; {          resolve(res)        },        (error) =&gt; {          reject(error)        }      )    })  }, */\n  // 获取所有公告  getNotice() {    return new Promise((resolve, reject) =&gt; {      http(‘get’, ‘/gg_notice’).then(        (res) =&gt; {          resolve(res)        },        (error) =&gt; {          reject(error)        }      )    })  },  // 添加公告 data: {content,title,username}  addNotice(data) {    return new Promise((resolve, reject) =&gt; {      http(‘post’, ‘/gg_notice’, data).then(        (res) =&gt; {          resolve(res)        },        (error) =&gt; {          reject(error)        }      )    })  },}\n","slug":"hello-world","date":"2022-11-30T13:32:09.524Z","categories_index":"","tags_index":"","author_index":"团子"}]