{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","path":"icons/favicon-16x16.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","path":"icons/favicon-32x32.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","path":"static/css/404.1a6cd5bd.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.32dfa3b0.css","path":"static/css/about.32dfa3b0.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.0d31776f.css","path":"static/css/app.0d31776f.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","path":"static/css/categories.10e2be12.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.c0d49bd5.css","path":"static/css/archives.c0d49bd5.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.749ad047.css","path":"static/css/page.749ad047.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","path":"static/css/post.9f951a60.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","path":"static/css/result.10e2be12.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","path":"static/css/tags.10e2be12.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","path":"static/img/default-cover.df7c128c.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.00d640a8.js","path":"static/js/404.00d640a8.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.024aacd1.js","path":"static/js/about.024aacd1.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.6d2c358d.js","path":"static/js/app.6d2c358d.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.574ac664.js","path":"static/js/archives.574ac664.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","path":"static/css/chunk-libs.eebac533.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.90aa5475.js","path":"static/js/categories.90aa5475.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.dc6146cd.js","path":"static/js/chunk-libs.dc6146cd.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a02618ad.js","path":"static/js/page.a02618ad.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.39470350.js","path":"static/js/result.39470350.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.2ad613f5.js","path":"static/js/tags.2ad613f5.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.cebfbaa4.js","path":"static/js/post.cebfbaa4.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"f63e69806a863623a9d11b0051de32c3cec4c516","modified":1669827790734},{"_id":"source/_posts/hello-world copy 2.md","hash":"75526bd15e478dcb8947c28bb32e1fb96489856b","modified":1669825721204},{"_id":"source/_posts/hello-world copy 3.md","hash":"4db1a8294e0133095f88f7682073176c0b93cc65","modified":1669825598262},{"_id":"source/_posts/hello-world copy.md","hash":"5f8da9655de9e760133e9797b63d07eadcedb9b7","modified":1669825744501},{"_id":"source/_posts/hello-world.md","hash":"7517f7560c439585093ee1ba66cc6da21fe10174","modified":1669825638826},{"_id":"source/about/index.md","hash":"76fa48d5bd9f31e548bfbca643a1b57942e10e9e","modified":1669821191762},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG.md","hash":"e68f3af8af17d326a48e1b317e01d7429193217e","modified":1669815252705},{"_id":"node_modules/hexo-theme-aurora/.browserslistrc","hash":"db215b841182d2af3259a1c1d6e1957bca333970","modified":1669815251350},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG_CN.md","hash":"5d13c251e8b77fd86870da50f3be98f8822edc66","modified":1669815252700},{"_id":"node_modules/hexo-theme-aurora/LICENSE","hash":"21cf269018b0cf04e1126b6b9b1a5e6af7c5e61f","modified":1669815251434},{"_id":"node_modules/hexo-theme-aurora/_config.yml","hash":"e6b2335cb393444b8a1fc1ad65331f4a30bc8915","modified":1669815252718},{"_id":"node_modules/hexo-theme-aurora/README.md","hash":"c50f58b08b75780990c18ab85761e3e24aac0d90","modified":1669815252707},{"_id":"node_modules/hexo-theme-aurora/jest.config.js","hash":"425f08cb718a56630ce61ae0686f35c55ef565df","modified":1669815252631},{"_id":"node_modules/hexo-theme-aurora/package.json","hash":"1b312a6a2de107ba9dc952614f1078c78664a4e4","modified":1669815252698},{"_id":"node_modules/hexo-theme-aurora/.circleci/config.yml","hash":"534051be311581f69aa8287120275a04539290e4","modified":1669815252724},{"_id":"node_modules/hexo-theme-aurora/data/cn.yml","hash":"4f5dcc1e2953df7a8e4e683c1a9115f6e0041f5e","modified":1669815252721},{"_id":"node_modules/hexo-theme-aurora/data/en.yml","hash":"7bbd6c0da0ae2f93f8a786a3be77fbe4e95a787e","modified":1669815252731},{"_id":"node_modules/hexo-theme-aurora/layout/index.ejs","hash":"94732830a65b718d2fa506b8598df44f14399fd8","modified":1669815252031},{"_id":"node_modules/hexo-theme-aurora/scripts/index.js","hash":"2a3c62a860581ee6813ca4bcaa7c952f614e818c","modified":1669815252564},{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1669815252067},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1669815252712},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1669815252716},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/filters/index.js","hash":"5eacff9446dd6c9a7eb0a0c84be9187055440454","modified":1669815252584},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/category.js","hash":"0ae21ffcf6e471ebfb72ac62a833991fae86ec8a","modified":1669815252484},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/index.js","hash":"dfbb0fdbf990bd67684ed891a4aaa1fd8dcd23f2","modified":1669815252596},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/page.js","hash":"1be54ea9cdf8e293e67bf457075fcdd8a72b8779","modified":1669815252658},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/search.js","hash":"a2a636e1df76efdcaca37226b490afa539ce766b","modified":1669815252678},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/post.js","hash":"76c3268e8b6887fb1fd11c4d71004aad9dc215fc","modified":1669815252671},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/site.js","hash":"b5f5ce813b4b0b322eceb11b036dc65201604256","modified":1669815252680},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/statistic.js","hash":"1c641956e15cec96490de16a88ccc7bec0c9d5c4","modified":1669815252682},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/tag.js","hash":"975e79e73d2503a33dbc63655b948100cc46d44f","modified":1669815252686},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/mapper.js","hash":"7a99508d910321b90b4afa0df02ad90f62336901","modified":1669815252645},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/symbols-count-time.js","hash":"d1a81e31b2988edcdf4b4761cec7326a980f097a","modified":1669815252684},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/toc.js","hash":"5c7348c550ef7f164d492847801a360cdefc60a2","modified":1669815252690},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/truncate-html.js","hash":"49d4832af027eabe5b8383a24e66dceae761533e","modified":1669815252693},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/utils.js","hash":"93ff75f0e35a1dc40d5406cc097f5988dd820600","modified":1669815252696},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/injector/index.js","hash":"7ca562ea3af3068ee925b5a8afdce0eaa1e15e64","modified":1669815252615},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":1669815251595},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":1669815251697},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1669815251837},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":1669815251798},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":1669815251890},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1669815251943},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1669815252000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1669815251966},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1669815252186},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":1669815252271},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":1669815252334},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":1669815252459},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1669815251855},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":1669815252470},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":1669815252658},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":1669815252675},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":1669815252687},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":1669815252662},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":1669815251773},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":1669815252454},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":1669815252552},{"_id":"public/api/posts/1.json","hash":"d0a5e25d90d02443a91f1384aa5e18f9270c389a","modified":1669833290297},{"_id":"public/api/articles/hello-world copy 2.json","hash":"fd93c3da255bfd90552fc6879bdeaa93018408fd","modified":1669833290297},{"_id":"public/api/articles/hello-world copy 3.json","hash":"c2a4abf38d8437527c16cc0d7b9e116e9d6007f2","modified":1669833290297},{"_id":"public/api/articles/hello-world copy.json","hash":"2b7311e977c9d453992c332ac92f0eec15fa633b","modified":1669833290297},{"_id":"public/api/articles/hello-world.json","hash":"470dc1bfe3d32389aac8d302a783c2c288ebf777","modified":1669833290297},{"_id":"public/api/features.json","hash":"9979190dfeb4f1842ab0517836ae9270ab968e49","modified":1669833290297},{"_id":"public/api/authors/blog-author.json","hash":"95a39fac9dfd950888d824fb60738526832e51f8","modified":1669833290297},{"_id":"public/api/site.json","hash":"24d6b5994883f5fb4ceaed536fa17df6eb34b9c2","modified":1669833290297},{"_id":"public/api/categories.json","hash":"97d170e1550eee4afc0af065b78cda302a97674c","modified":1669833290297},{"_id":"public/api/tags.json","hash":"97d170e1550eee4afc0af065b78cda302a97674c","modified":1669833290297},{"_id":"public/api/pages/about/index.json","hash":"fe919603b66229451c23e4a26c51e8a2e15a420c","modified":1669833290297},{"_id":"public/api/statistic.json","hash":"7dec6af756147281ed5b32441da017aca6021d00","modified":1669833290297},{"_id":"public/api/search.json","hash":"b99025372401a590f3c4d1d05162d587e5493159","modified":1669833290297},{"_id":"public/post/hello-world copy 3.html","hash":"5f8f374f0327349e7382d013f3e57e3daa1bd1ff","modified":1669833290297},{"_id":"public/post/hello-world copy 2.html","hash":"5f8f374f0327349e7382d013f3e57e3daa1bd1ff","modified":1669833290297},{"_id":"public/post/hello-world.html","hash":"5f8f374f0327349e7382d013f3e57e3daa1bd1ff","modified":1669833290297},{"_id":"public/post/hello-world copy.html","hash":"5f8f374f0327349e7382d013f3e57e3daa1bd1ff","modified":1669833290297},{"_id":"public/index.html","hash":"5f8f374f0327349e7382d013f3e57e3daa1bd1ff","modified":1669833290297},{"_id":"public/tags/index.html","hash":"5f8f374f0327349e7382d013f3e57e3daa1bd1ff","modified":1669833290297},{"_id":"public/archives/index.html","hash":"5f8f374f0327349e7382d013f3e57e3daa1bd1ff","modified":1669833290297},{"_id":"public/page/about/index.html","hash":"5f8f374f0327349e7382d013f3e57e3daa1bd1ff","modified":1669833290297},{"_id":"public/tags/search/index.html","hash":"5f8f374f0327349e7382d013f3e57e3daa1bd1ff","modified":1669833290297},{"_id":"public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1669833290297},{"_id":"public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1669833290297},{"_id":"public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1669833290297},{"_id":"public/CNAME","hash":"f63e69806a863623a9d11b0051de32c3cec4c516","modified":1669833290297},{"_id":"public/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1669833290297},{"_id":"public/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":1669833290297},{"_id":"public/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":1669833290297},{"_id":"public/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1669833290297},{"_id":"public/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":1669833290297},{"_id":"public/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":1669833290297},{"_id":"public/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1669833290297},{"_id":"public/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1669833290297},{"_id":"public/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":1669833290297},{"_id":"public/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1669833290297},{"_id":"public/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":1669833290297},{"_id":"public/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":1669833290297},{"_id":"public/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1669833290297},{"_id":"public/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":1669833290297},{"_id":"public/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":1669833290297},{"_id":"public/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":1669833290297},{"_id":"public/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":1669833290297},{"_id":"public/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":1669833290297},{"_id":"public/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":1669833290297},{"_id":"public/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":1669833290297},{"_id":"public/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":1669833290297}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2022-11-30T13:38:27.000Z","feature":true,"_content":"hello","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-11-30 21:38:27\nfeature: true\n---\nhello","updated":"2022-11-30T15:13:11.762Z","path":"about/index.html","comments":1,"layout":"page","_id":"clb3zmldm0000r0w8938tch8m","content":"<p>hello</p>\n","site":{"data":{}},"excerpt":"","more":"<p>hello</p>\n"}],"Post":[{"title":"节流和防抖的总结","_content":"一、总结\n1、节流：本质上是对执行频率的限制，有节奏的在执行。(走A)\n2、防抖：本质上是对执行次数的限制，多次密集触发的情况下，只会执行一次。(回城)\n3、节流更关注\"过程\"，防抖关注\"结果\"。\n二、重点\n● 过程(限制频率) vs 结果。\n● 实际工作 https://www.lodashjs.com/","source":"_posts/hello-world copy 2.md","raw":"---\ntitle: 节流和防抖的总结\n---\n一、总结\n1、节流：本质上是对执行频率的限制，有节奏的在执行。(走A)\n2、防抖：本质上是对执行次数的限制，多次密集触发的情况下，只会执行一次。(回城)\n3、节流更关注\"过程\"，防抖关注\"结果\"。\n二、重点\n● 过程(限制频率) vs 结果。\n● 实际工作 https://www.lodashjs.com/","slug":"hello-world copy 2","published":1,"date":"2022-11-30T16:07:07.141Z","updated":"2022-11-30T16:28:41.204Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zmldp0001r0w8e542dgly","content":"<p>一、总结<br>1、节流：本质上是对执行频率的限制，有节奏的在执行。(走A)<br>2、防抖：本质上是对执行次数的限制，多次密集触发的情况下，只会执行一次。(回城)<br>3、节流更关注”过程”，防抖关注”结果”。<br>二、重点<br>● 过程(限制频率) vs 结果。<br>● 实际工作 <a href=\"https://www.lodashjs.com/\">https://www.lodashjs.com/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一、总结<br>1、节流：本质上是对执行频率的限制，有节奏的在执行。(走A)<br>2、防抖：本质上是对执行次数的限制，多次密集触发的情况下，只会执行一次。(回城)<br>3、节流更关注”过程”，防抖关注”结果”。<br>二、重点<br>● 过程(限制频率) vs 结果。<br>● 实际工作 <a href=\"https://www.lodashjs.com/\">https://www.lodashjs.com/</a></p>\n"},{"title":"你好，欢迎到访团子的博客","_content":"欢迎首位用户，安红红同学！\n\n\n","source":"_posts/hello-world copy 3.md","raw":"---\ntitle: 你好，欢迎到访团子的博客\n---\n欢迎首位用户，安红红同学！\n\n\n","slug":"hello-world copy 3","published":1,"date":"2022-11-30T16:07:07.903Z","updated":"2022-11-30T16:26:38.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zmldv0002r0w88z0i5sq5","content":"<p>欢迎首位用户，安红红同学！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>欢迎首位用户，安红红同学！</p>\n"},{"title":"箭头的缺点","_content":"1、函数内部没有arguments\n2、不兼容call,apply,bind\n3、不能作为对象的方法\n4、代码难以阅读\n1、arguments\n函数内部没有arguments\n/* 1、函数内部没有arguments */\nfunction go(){\n    console.log(arguments)\n}\nconst fn  = ()=>{\n    console.log(arguments);\n}\ngo();\nfn();\n2、不兼容call,apply,bind\nvar name = \"window\";\nfunction go() {\n    console.log(this.name)\n}\nconst fn = () => {\n    console.log(this.name)\n}\ngo.call({ name: \"vue\" });\nfn.call({ name: \"react\" })//❌箭头函数不兼容call,bind,apply\n3、不能作为对象的方法\n/* 不能作为对象的方法 */\nvar obj = {\n    name: \"react\",\n    sayName: () => {\n        console.log(this.name)\n    }\n}\nobj.sayName(); //❌\n4、代码可读性差\n/* 代码可读性差 */\nvar a =20;\nconst fn = ()=>a>10? '正确':'错误';","source":"_posts/hello-world copy.md","raw":"---\ntitle: 箭头的缺点\n---\n1、函数内部没有arguments\n2、不兼容call,apply,bind\n3、不能作为对象的方法\n4、代码难以阅读\n1、arguments\n函数内部没有arguments\n/* 1、函数内部没有arguments */\nfunction go(){\n    console.log(arguments)\n}\nconst fn  = ()=>{\n    console.log(arguments);\n}\ngo();\nfn();\n2、不兼容call,apply,bind\nvar name = \"window\";\nfunction go() {\n    console.log(this.name)\n}\nconst fn = () => {\n    console.log(this.name)\n}\ngo.call({ name: \"vue\" });\nfn.call({ name: \"react\" })//❌箭头函数不兼容call,bind,apply\n3、不能作为对象的方法\n/* 不能作为对象的方法 */\nvar obj = {\n    name: \"react\",\n    sayName: () => {\n        console.log(this.name)\n    }\n}\nobj.sayName(); //❌\n4、代码可读性差\n/* 代码可读性差 */\nvar a =20;\nconst fn = ()=>a>10? '正确':'错误';","slug":"hello-world copy","published":1,"date":"2022-11-30T16:06:26.071Z","updated":"2022-11-30T16:29:04.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zmldy0003r0w82wnz8tks","content":"<p>1、函数内部没有arguments<br>2、不兼容call,apply,bind<br>3、不能作为对象的方法<br>4、代码难以阅读<br>1、arguments<br>函数内部没有arguments<br>/* 1、函数内部没有arguments <em>/<br>function go(){<br>    console.log(arguments)<br>}<br>const fn  = ()=&gt;{<br>    console.log(arguments);<br>}<br>go();<br>fn();<br>2、不兼容call,apply,bind<br>var name = “window”;<br>function go() {<br>    console.log(this.name)<br>}<br>const fn = () =&gt; {<br>    console.log(this.name)<br>}<br>go.call({ name: “vue” });<br>fn.call({ name: “react” })//❌箭头函数不兼容call,bind,apply<br>3、不能作为对象的方法<br>/</em> 不能作为对象的方法 <em>/<br>var obj = {<br>    name: “react”,<br>    sayName: () =&gt; {<br>        console.log(this.name)<br>    }<br>}<br>obj.sayName(); //❌<br>4、代码可读性差<br>/</em> 代码可读性差 */<br>var a =20;<br>const fn = ()=&gt;a&gt;10? ‘正确’:’错误’;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、函数内部没有arguments<br>2、不兼容call,apply,bind<br>3、不能作为对象的方法<br>4、代码难以阅读<br>1、arguments<br>函数内部没有arguments<br>/* 1、函数内部没有arguments <em>/<br>function go(){<br>    console.log(arguments)<br>}<br>const fn  = ()=&gt;{<br>    console.log(arguments);<br>}<br>go();<br>fn();<br>2、不兼容call,apply,bind<br>var name = “window”;<br>function go() {<br>    console.log(this.name)<br>}<br>const fn = () =&gt; {<br>    console.log(this.name)<br>}<br>go.call({ name: “vue” });<br>fn.call({ name: “react” })//❌箭头函数不兼容call,bind,apply<br>3、不能作为对象的方法<br>/</em> 不能作为对象的方法 <em>/<br>var obj = {<br>    name: “react”,<br>    sayName: () =&gt; {<br>        console.log(this.name)<br>    }<br>}<br>obj.sayName(); //❌<br>4、代码可读性差<br>/</em> 代码可读性差 */<br>var a =20;<br>const fn = ()=&gt;a&gt;10? ‘正确’:’错误’;</p>\n"},{"title":"在前端页面调用api时的问题","_content":"1.请求路径利用.env.development文件去实现url的统一化。\n代码\n# .env.development\nVITE_APP_BASE_API ='http://localhost:3000'\n\n2.在request文件夹内，新建index.js文件，实现拦截器，用于封装所有请求的通用功能（get,post,patch,put..）\nimport axios from 'axios'\n\naxios.defaults.baseURL = import.meta.env.VITE_APP_BASE_API\naxios.defaults.timeout = 3000\n/**\n * http request 拦截器\n */\n axios.interceptors.request.use(\n    (config) => {\n      config.data = JSON.stringify(config.data)\n      config.headers = {\n        'Content-Type': 'application/json',\n      }\n      return config\n    },\n    (error) => {\n      return Promise.reject(error)\n    }\n  )\n  \n  /**\n   * http response 拦截器\n   */\n  axios.interceptors.response.use(\n    (response) => {\n      if (response.data.errCode === 2) {\n        console.log('过期')\n      }\n      return response\n    },\n    (error) => {\n      console.log('请求出错：', error)\n    }\n  )\n  \n  /**\n   * 封装get方法\n   * @param url  请求url\n   * @param params  请求参数\n   * @returns {Promise}\n   */\n  export function get(url, params = {}) {\n    return new Promise((resolve, reject) => {\n      axios\n        .get(url, {\n          params: params,\n        })\n        .then((response) => {\n          landing(url, params, response.data)\n          resolve(response.data)\n        })\n        .catch((error) => {\n          reject(error)\n        })\n    })\n  }\n  \n  /**\n   * 封装post请求\n   * @param url\n   * @param data\n   * @returns {Promise}\n   */\n  \n  export function post(url, data) {\n    return new Promise((resolve, reject) => {\n      axios.post(url, data).then(\n        (response) => {\n          //关闭进度条\n          resolve(response.data)\n        },\n        (err) => {\n          reject(err)\n        }\n      )\n    })\n  }\n  \n  /**\n   * 封装patch请求\n   * @param url\n   * @param data\n   * @returns {Promise}\n   */\n  export function patch(url, data = {}) {\n    return new Promise((resolve, reject) => {\n      axios.patch(url, data).then(\n        (response) => {\n          resolve(response.data)\n        },\n        (err) => {\n          msag(err)\n          reject(err)\n        }\n      )\n    })\n  }\n  \n  /**\n   * 封装put请求\n   * @param url\n   * @param data\n   * @returns {Promise}\n   */\n  \n  export function put(url, data = {}) {\n    return new Promise((resolve, reject) => {\n      axios.put(url, data).then(\n        (response) => {\n          resolve(response.data)\n        },\n        (err) => {\n          msag(err)\n          reject(err)\n        }\n      )\n    })\n  }\n  \n  //统一接口处理，返回数据\n  export default function (fecth, url, param) {\n    let _data = ''\n    return new Promise((resolve, reject) => {\n      switch (fecth) {\n        case 'get':\n          // console.log('begin a get request,and url:', url)\n          get(url, param)\n            .then(function (response) {\n              resolve(response)\n            })\n            .catch(function (error) {\n              // console.log('get request GET failed.', error)\n              reject(error)\n            })\n          break\n        case 'post':\n          post(url, param)\n            .then(function (response) {\n              resolve(response)\n            })\n            .catch(function (error) {\n              // console.log('get request POST failed.', error)\n              reject(error)\n            })\n          break\n        default:\n          break\n      }\n    })\n  }\n  /**\n * 查看返回的数据\n * @param url\n * @param params\n * @param data\n */\nfunction landing(url, params, data) {\n    if (data.code === -1) {\n    }\n  }\n3.对应事件写对应请求\nimport http from './index'\nexport default {\n  // 请求示例\n  /* getBanner() {\n    return new Promise((resolve, reject) => {\n      http('get', '/banner').then(\n        (res) => {\n          resolve(res)\n        },\n        (error) => {\n          reject(error)\n        }\n      )\n    })\n  }, */\n\n  // 获取所有公告\n  getNotice() {\n    return new Promise((resolve, reject) => {\n      http('get', '/gg_notice').then(\n        (res) => {\n          resolve(res)\n        },\n        (error) => {\n          reject(error)\n        }\n      )\n    })\n  },\n  // 添加公告 data: {content,title,username}\n  addNotice(data) {\n    return new Promise((resolve, reject) => {\n      http('post', '/gg_notice', data).then(\n        (res) => {\n          resolve(res)\n        },\n        (error) => {\n          reject(error)\n        }\n      )\n    })\n  },\n}","source":"_posts/hello-world.md","raw":"---\ntitle: 在前端页面调用api时的问题\n---\n1.请求路径利用.env.development文件去实现url的统一化。\n代码\n# .env.development\nVITE_APP_BASE_API ='http://localhost:3000'\n\n2.在request文件夹内，新建index.js文件，实现拦截器，用于封装所有请求的通用功能（get,post,patch,put..）\nimport axios from 'axios'\n\naxios.defaults.baseURL = import.meta.env.VITE_APP_BASE_API\naxios.defaults.timeout = 3000\n/**\n * http request 拦截器\n */\n axios.interceptors.request.use(\n    (config) => {\n      config.data = JSON.stringify(config.data)\n      config.headers = {\n        'Content-Type': 'application/json',\n      }\n      return config\n    },\n    (error) => {\n      return Promise.reject(error)\n    }\n  )\n  \n  /**\n   * http response 拦截器\n   */\n  axios.interceptors.response.use(\n    (response) => {\n      if (response.data.errCode === 2) {\n        console.log('过期')\n      }\n      return response\n    },\n    (error) => {\n      console.log('请求出错：', error)\n    }\n  )\n  \n  /**\n   * 封装get方法\n   * @param url  请求url\n   * @param params  请求参数\n   * @returns {Promise}\n   */\n  export function get(url, params = {}) {\n    return new Promise((resolve, reject) => {\n      axios\n        .get(url, {\n          params: params,\n        })\n        .then((response) => {\n          landing(url, params, response.data)\n          resolve(response.data)\n        })\n        .catch((error) => {\n          reject(error)\n        })\n    })\n  }\n  \n  /**\n   * 封装post请求\n   * @param url\n   * @param data\n   * @returns {Promise}\n   */\n  \n  export function post(url, data) {\n    return new Promise((resolve, reject) => {\n      axios.post(url, data).then(\n        (response) => {\n          //关闭进度条\n          resolve(response.data)\n        },\n        (err) => {\n          reject(err)\n        }\n      )\n    })\n  }\n  \n  /**\n   * 封装patch请求\n   * @param url\n   * @param data\n   * @returns {Promise}\n   */\n  export function patch(url, data = {}) {\n    return new Promise((resolve, reject) => {\n      axios.patch(url, data).then(\n        (response) => {\n          resolve(response.data)\n        },\n        (err) => {\n          msag(err)\n          reject(err)\n        }\n      )\n    })\n  }\n  \n  /**\n   * 封装put请求\n   * @param url\n   * @param data\n   * @returns {Promise}\n   */\n  \n  export function put(url, data = {}) {\n    return new Promise((resolve, reject) => {\n      axios.put(url, data).then(\n        (response) => {\n          resolve(response.data)\n        },\n        (err) => {\n          msag(err)\n          reject(err)\n        }\n      )\n    })\n  }\n  \n  //统一接口处理，返回数据\n  export default function (fecth, url, param) {\n    let _data = ''\n    return new Promise((resolve, reject) => {\n      switch (fecth) {\n        case 'get':\n          // console.log('begin a get request,and url:', url)\n          get(url, param)\n            .then(function (response) {\n              resolve(response)\n            })\n            .catch(function (error) {\n              // console.log('get request GET failed.', error)\n              reject(error)\n            })\n          break\n        case 'post':\n          post(url, param)\n            .then(function (response) {\n              resolve(response)\n            })\n            .catch(function (error) {\n              // console.log('get request POST failed.', error)\n              reject(error)\n            })\n          break\n        default:\n          break\n      }\n    })\n  }\n  /**\n * 查看返回的数据\n * @param url\n * @param params\n * @param data\n */\nfunction landing(url, params, data) {\n    if (data.code === -1) {\n    }\n  }\n3.对应事件写对应请求\nimport http from './index'\nexport default {\n  // 请求示例\n  /* getBanner() {\n    return new Promise((resolve, reject) => {\n      http('get', '/banner').then(\n        (res) => {\n          resolve(res)\n        },\n        (error) => {\n          reject(error)\n        }\n      )\n    })\n  }, */\n\n  // 获取所有公告\n  getNotice() {\n    return new Promise((resolve, reject) => {\n      http('get', '/gg_notice').then(\n        (res) => {\n          resolve(res)\n        },\n        (error) => {\n          reject(error)\n        }\n      )\n    })\n  },\n  // 添加公告 data: {content,title,username}\n  addNotice(data) {\n    return new Promise((resolve, reject) => {\n      http('post', '/gg_notice', data).then(\n        (res) => {\n          resolve(res)\n        },\n        (error) => {\n          reject(error)\n        }\n      )\n    })\n  },\n}","slug":"hello-world","published":1,"date":"2022-11-30T13:32:09.524Z","updated":"2022-11-30T16:27:18.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb3zmldz0004r0w8hu7u401k","content":"<p>1.请求路径利用.env.development文件去实现url的统一化。<br>代码</p>\n<h1 id=\"env-development\"><a href=\"#env-development\" class=\"headerlink\" title=\".env.development\"></a>.env.development</h1><p>VITE_APP_BASE_API =’<a href=\"http://localhost:3000&#39;\">http://localhost:3000&#39;</a></p>\n<p>2.在request文件夹内，新建index.js文件，实现拦截器，用于封装所有请求的通用功能（get,post,patch,put..）<br>import axios from ‘axios’</p>\n<p>axios.defaults.baseURL = import.meta.env.VITE_APP_BASE_API<br>axios.defaults.timeout = 3000<br>/**</p>\n<ul>\n<li>http request 拦截器</li>\n<li>/<br>axios.interceptors.request.use(<br>  (config) =&gt; {<pre><code>config.data = JSON.stringify(config.data)\nconfig.headers = &#123;\n  &#39;Content-Type&#39;: &#39;application/json&#39;,\n&#125;\nreturn config\n</code></pre>\n  },<br>  (error) =&gt; {<pre><code>return Promise.reject(error)\n</code></pre>\n  }<br>)/**<ul>\n<li>http response 拦截器</li>\n<li>/<br>axios.interceptors.response.use(<br>(response) =&gt; {<br>  if (response.data.errCode === 2) {<pre><code>console.log(&#39;过期&#39;)\n</code></pre>\n  }<br>  return response<br>},<br>(error) =&gt; {<br>  console.log(‘请求出错：’, error)<br>}<br>)</li>\n</ul>\n/**<ul>\n<li>封装get方法</li>\n<li>@param url  请求url</li>\n<li>@param params  请求参数</li>\n<li>@returns {Promise}</li>\n<li>/<br>export function get(url, params = {}) {<br>return new Promise((resolve, reject) =&gt; {<br>  axios<pre><code>.get(url, &#123;\n  params: params,\n&#125;)\n.then((response) =&gt; &#123;\n  landing(url, params, response.data)\n  resolve(response.data)\n&#125;)\n.catch((error) =&gt; &#123;\n  reject(error)\n&#125;)\n</code></pre>\n})<br>}</li>\n</ul>\n/**<ul>\n<li>封装post请求</li>\n<li>@param url</li>\n<li>@param data</li>\n<li>@returns {Promise}</li>\n<li>/</li>\n</ul>\nexport function post(url, data) {<br>  return new Promise((resolve, reject) =&gt; {<pre><code>axios.post(url, data).then(\n  (response) =&gt; &#123;\n    //关闭进度条\n    resolve(response.data)\n  &#125;,\n  (err) =&gt; &#123;\n    reject(err)\n  &#125;\n)\n</code></pre>\n  })<br>}/**<ul>\n<li>封装patch请求</li>\n<li>@param url</li>\n<li>@param data</li>\n<li>@returns {Promise}</li>\n<li>/<br>export function patch(url, data = {}) {<br>return new Promise((resolve, reject) =&gt; {<br>  axios.patch(url, data).then(<pre><code>(response) =&gt; &#123;\n  resolve(response.data)\n&#125;,\n(err) =&gt; &#123;\n  msag(err)\n  reject(err)\n&#125;\n</code></pre>\n  )<br>})<br>}</li>\n</ul>\n/**<ul>\n<li>封装put请求</li>\n<li>@param url</li>\n<li>@param data</li>\n<li>@returns {Promise}</li>\n<li>/</li>\n</ul>\nexport function put(url, data = {}) {<br>  return new Promise((resolve, reject) =&gt; {<pre><code>axios.put(url, data).then(\n  (response) =&gt; &#123;\n    resolve(response.data)\n  &#125;,\n  (err) =&gt; &#123;\n    msag(err)\n    reject(err)\n  &#125;\n)\n</code></pre>\n  })<br>}//统一接口处理，返回数据<br>export default function (fecth, url, param) {<br>  let _data = ‘’<br>  return new Promise((resolve, reject) =&gt; {<pre><code>switch (fecth) &#123;\n  case &#39;get&#39;:\n    // console.log(&#39;begin a get request,and url:&#39;, url)\n    get(url, param)\n      .then(function (response) &#123;\n        resolve(response)\n      &#125;)\n      .catch(function (error) &#123;\n        // console.log(&#39;get request GET failed.&#39;, error)\n        reject(error)\n      &#125;)\n    break\n  case &#39;post&#39;:\n    post(url, param)\n      .then(function (response) &#123;\n        resolve(response)\n      &#125;)\n      .catch(function (error) &#123;\n        // console.log(&#39;get request POST failed.&#39;, error)\n        reject(error)\n      &#125;)\n    break\n  default:\n    break\n&#125;\n</code></pre>\n  })<br>}<br>/**</li>\n<li>查看返回的数据</li>\n<li>@param url</li>\n<li>@param params</li>\n<li>@param data</li>\n<li>/<br>function landing(url, params, data) {<br>  if (data.code === -1) {<br>  }<br>}</li>\n</ul>\n<p>3.对应事件写对应请求<br>import http from ‘./index’<br>export default {<br>  // 请求示例<br>  /* getBanner() {<br>    return new Promise((resolve, reject) =&gt; {<br>      http(‘get’, ‘/banner’).then(<br>        (res) =&gt; {<br>          resolve(res)<br>        },<br>        (error) =&gt; {<br>          reject(error)<br>        }<br>      )<br>    })<br>  }, */</p>\n<p>  // 获取所有公告<br>  getNotice() {<br>    return new Promise((resolve, reject) =&gt; {<br>      http(‘get’, ‘/gg_notice’).then(<br>        (res) =&gt; {<br>          resolve(res)<br>        },<br>        (error) =&gt; {<br>          reject(error)<br>        }<br>      )<br>    })<br>  },<br>  // 添加公告 data: {content,title,username}<br>  addNotice(data) {<br>    return new Promise((resolve, reject) =&gt; {<br>      http(‘post’, ‘/gg_notice’, data).then(<br>        (res) =&gt; {<br>          resolve(res)<br>        },<br>        (error) =&gt; {<br>          reject(error)<br>        }<br>      )<br>    })<br>  },<br>}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.请求路径利用.env.development文件去实现url的统一化。<br>代码</p>\n<h1 id=\"env-development\"><a href=\"#env-development\" class=\"headerlink\" title=\".env.development\"></a>.env.development</h1><p>VITE_APP_BASE_API =’<a href=\"http://localhost:3000&#39;\">http://localhost:3000&#39;</a></p>\n<p>2.在request文件夹内，新建index.js文件，实现拦截器，用于封装所有请求的通用功能（get,post,patch,put..）<br>import axios from ‘axios’</p>\n<p>axios.defaults.baseURL = import.meta.env.VITE_APP_BASE_API<br>axios.defaults.timeout = 3000<br>/**</p>\n<ul>\n<li>http request 拦截器</li>\n<li>/<br>axios.interceptors.request.use(<br>  (config) =&gt; {<pre><code>config.data = JSON.stringify(config.data)\nconfig.headers = &#123;\n  &#39;Content-Type&#39;: &#39;application/json&#39;,\n&#125;\nreturn config\n</code></pre>\n  },<br>  (error) =&gt; {<pre><code>return Promise.reject(error)\n</code></pre>\n  }<br>)/**<ul>\n<li>http response 拦截器</li>\n<li>/<br>axios.interceptors.response.use(<br>(response) =&gt; {<br>  if (response.data.errCode === 2) {<pre><code>console.log(&#39;过期&#39;)\n</code></pre>\n  }<br>  return response<br>},<br>(error) =&gt; {<br>  console.log(‘请求出错：’, error)<br>}<br>)</li>\n</ul>\n/**<ul>\n<li>封装get方法</li>\n<li>@param url  请求url</li>\n<li>@param params  请求参数</li>\n<li>@returns {Promise}</li>\n<li>/<br>export function get(url, params = {}) {<br>return new Promise((resolve, reject) =&gt; {<br>  axios<pre><code>.get(url, &#123;\n  params: params,\n&#125;)\n.then((response) =&gt; &#123;\n  landing(url, params, response.data)\n  resolve(response.data)\n&#125;)\n.catch((error) =&gt; &#123;\n  reject(error)\n&#125;)\n</code></pre>\n})<br>}</li>\n</ul>\n/**<ul>\n<li>封装post请求</li>\n<li>@param url</li>\n<li>@param data</li>\n<li>@returns {Promise}</li>\n<li>/</li>\n</ul>\nexport function post(url, data) {<br>  return new Promise((resolve, reject) =&gt; {<pre><code>axios.post(url, data).then(\n  (response) =&gt; &#123;\n    //关闭进度条\n    resolve(response.data)\n  &#125;,\n  (err) =&gt; &#123;\n    reject(err)\n  &#125;\n)\n</code></pre>\n  })<br>}/**<ul>\n<li>封装patch请求</li>\n<li>@param url</li>\n<li>@param data</li>\n<li>@returns {Promise}</li>\n<li>/<br>export function patch(url, data = {}) {<br>return new Promise((resolve, reject) =&gt; {<br>  axios.patch(url, data).then(<pre><code>(response) =&gt; &#123;\n  resolve(response.data)\n&#125;,\n(err) =&gt; &#123;\n  msag(err)\n  reject(err)\n&#125;\n</code></pre>\n  )<br>})<br>}</li>\n</ul>\n/**<ul>\n<li>封装put请求</li>\n<li>@param url</li>\n<li>@param data</li>\n<li>@returns {Promise}</li>\n<li>/</li>\n</ul>\nexport function put(url, data = {}) {<br>  return new Promise((resolve, reject) =&gt; {<pre><code>axios.put(url, data).then(\n  (response) =&gt; &#123;\n    resolve(response.data)\n  &#125;,\n  (err) =&gt; &#123;\n    msag(err)\n    reject(err)\n  &#125;\n)\n</code></pre>\n  })<br>}//统一接口处理，返回数据<br>export default function (fecth, url, param) {<br>  let _data = ‘’<br>  return new Promise((resolve, reject) =&gt; {<pre><code>switch (fecth) &#123;\n  case &#39;get&#39;:\n    // console.log(&#39;begin a get request,and url:&#39;, url)\n    get(url, param)\n      .then(function (response) &#123;\n        resolve(response)\n      &#125;)\n      .catch(function (error) &#123;\n        // console.log(&#39;get request GET failed.&#39;, error)\n        reject(error)\n      &#125;)\n    break\n  case &#39;post&#39;:\n    post(url, param)\n      .then(function (response) &#123;\n        resolve(response)\n      &#125;)\n      .catch(function (error) &#123;\n        // console.log(&#39;get request POST failed.&#39;, error)\n        reject(error)\n      &#125;)\n    break\n  default:\n    break\n&#125;\n</code></pre>\n  })<br>}<br>/**</li>\n<li>查看返回的数据</li>\n<li>@param url</li>\n<li>@param params</li>\n<li>@param data</li>\n<li>/<br>function landing(url, params, data) {<br>  if (data.code === -1) {<br>  }<br>}</li>\n</ul>\n<p>3.对应事件写对应请求<br>import http from ‘./index’<br>export default {<br>  // 请求示例<br>  /* getBanner() {<br>    return new Promise((resolve, reject) =&gt; {<br>      http(‘get’, ‘/banner’).then(<br>        (res) =&gt; {<br>          resolve(res)<br>        },<br>        (error) =&gt; {<br>          reject(error)<br>        }<br>      )<br>    })<br>  }, */</p>\n<p>  // 获取所有公告<br>  getNotice() {<br>    return new Promise((resolve, reject) =&gt; {<br>      http(‘get’, ‘/gg_notice’).then(<br>        (res) =&gt; {<br>          resolve(res)<br>        },<br>        (error) =&gt; {<br>          reject(error)<br>        }<br>      )<br>    })<br>  },<br>  // 添加公告 data: {content,title,username}<br>  addNotice(data) {<br>    return new Promise((resolve, reject) =&gt; {<br>      http(‘post’, ‘/gg_notice’, data).then(<br>        (res) =&gt; {<br>          resolve(res)<br>        },<br>        (error) =&gt; {<br>          reject(error)<br>        }<br>      )<br>    })<br>  },<br>}</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}