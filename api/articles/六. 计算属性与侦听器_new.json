{"title":"六. 计算属性与侦听器","uid":"4277aac2cb081b743e86fc465443e28f","slug":"六. 计算属性与侦听器_new","date":"2022-12-02T09:43:08.004Z","updated":"2022-12-02T09:43:08.005Z","comments":true,"path":"api/articles/六. 计算属性与侦听器_new.json","keywords":null,"cover":[],"content":"<p><a name=\"07a0b77b\"></a></p>\n<h2 id=\"1-计算属性\"><a href=\"#1-计算属性\" class=\"headerlink\" title=\"1 计算属性\"></a>1 计算属性</h2><p><a name=\"Do7vC\"></a></p>\n<h3 id=\"1-什么是计算属性\"><a href=\"#1-什么是计算属性\" class=\"headerlink\" title=\"1) 什么是计算属性\"></a>1) 什么是计算属性</h3><p>:::info<br>计算属性就是基于现有属性计算后的属性<br>:::<br><a name=\"WTECE\"></a></p>\n<h3 id=\"2-计算属性的作用\"><a href=\"#2-计算属性的作用\" class=\"headerlink\" title=\"2) 计算属性的作用\"></a>2) 计算属性的作用</h3><p>计算属性用于对原始数据的再次加工<br><a name=\"O2lqP\"></a></p>\n<h3 id=\"3-案例\"><a href=\"#3-案例\" class=\"headerlink\" title=\"3) 案例\"></a>3) 案例</h3><p>:::warning<br><strong>需求</strong><br />实现如下效果<br /><img src=\"https://blog4xk-1309331490.cos.ap-nanjing.myqcloud.com/markdown/1649729828868-41765194-0f7c-47b8-bcff-10efd40386c4.gif\" alt=\"反转字符串.gif\"><br>:::</p>\n<p><a name=\"C9foD\"></a></p>\n<h4 id=\"使用表达式实现\"><a href=\"#使用表达式实现\" class=\"headerlink\" title=\"使用表达式实现\"></a>使用表达式实现</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;Document&lt;&#x2F;title&gt;\n    &lt;script src&#x3D;&quot;..&#x2F;node_modules&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;!-- 需求: 实现字符串的反转\n          eg. abc 转换成  cba \n    --&gt;\n    &lt;div id&#x3D;&quot;app&quot;&gt;\n      请输入一个字符串: &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;msg&quot; &#x2F;&gt; &lt;br &#x2F;&gt;\n      &lt;!-- 反转字符串的思路\n        1. 取出字符串中的每个字符 msg.split(&#39;&#39;) 形成一个数组\n        2. 反转数据. msg.split(&#39;&#39;).reverse() 形成一个反转数组\n        3. 将反转数组拼接. msg.split(&#39;&#39;).reverse().join(&#39;&#39;)\n      --&gt;\n      &lt;!-- 不推荐!! 在模板中书写复杂的表达式 --&gt;\n      &lt;h3&gt;反转后的字符串: &#123;&#123;msg.split(&#39;&#39;).reverse().join(&#39;&#39;)&#125;&#125;&lt;&#x2F;h3&gt;\n    &lt;&#x2F;div&gt;\n\n    &lt;script&gt;\n      const vm &#x3D; new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n          msg: &#39;&#39;,\n        &#125;,\n      &#125;)\n    &lt;&#x2F;script&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n<p><a name=\"kqgQi\"></a></p>\n<h4 id=\"使用方法实现\"><a href=\"#使用方法实现\" class=\"headerlink\" title=\"使用方法实现\"></a>使用方法实现</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;Document&lt;&#x2F;title&gt;\n    &lt;script src&#x3D;&quot;..&#x2F;node_modules&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;!-- 需求: 实现字符串的反转\n          eg. abc 转换成  cba \n    --&gt;\n    &lt;div id&#x3D;&quot;app&quot;&gt;\n      请输入一个字符串: &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;msg&quot; &#x2F;&gt; &lt;br &#x2F;&gt;\n      &lt;!-- 反转字符串的思路\n        1. 取出字符串中的每个字符 msg.split(&#39;&#39;) 形成一个数组\n        2. 反转数据. msg.split(&#39;&#39;).reverse() 形成一个反转数组\n        3. 将反转数组拼接. msg.split(&#39;&#39;).reverse().join(&#39;&#39;)\n      --&gt;\n      &lt;!-- 不推荐使用方法\n        原因: 没有缓存, 每次调用方法, 代码会执行一次\n      --&gt;\n      &lt;h3&gt;反转后的字符串: &#123;&#123;reverseMsg()&#125;&#125;&lt;&#x2F;h3&gt;\n      &lt;h3&gt;反转后的字符串: &#123;&#123;reverseMsg()&#125;&#125;&lt;&#x2F;h3&gt;\n      &lt;h3&gt;反转后的字符串: &#123;&#123;reverseMsg()&#125;&#125;&lt;&#x2F;h3&gt;\n      &lt;h3&gt;反转后的字符串: &#123;&#123;reverseMsg()&#125;&#125;&lt;&#x2F;h3&gt;\n      &lt;h3&gt;反转后的字符串: &#123;&#123;reverseMsg()&#125;&#125;&lt;&#x2F;h3&gt;\n    &lt;&#x2F;div&gt;\n\n    &lt;script&gt;\n      const vm &#x3D; new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n          msg: &#39;&#39;,\n        &#125;,\n        methods: &#123;\n          reverseMsg() &#123;\n            console.log(&#39;反转函数被执行了...&#39;)\n            &#x2F;&#x2F; 返回 反转后的字符串\n            return this.msg.split(&#39;&#39;).reverse().join(&#39;&#39;)\n          &#125;,\n        &#125;,\n      &#125;)\n    &lt;&#x2F;script&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n<p><a name=\"V1oeS\"></a></p>\n<h4 id=\"使用计算属性实现\"><a href=\"#使用计算属性实现\" class=\"headerlink\" title=\"使用计算属性实现\"></a>使用计算属性实现</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;Document&lt;&#x2F;title&gt;\n    &lt;script src&#x3D;&quot;..&#x2F;node_modules&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;!-- 需求: 实现字符串的反转\n          eg. abc 转换成  cba \n    --&gt;\n    &lt;div id&#x3D;&quot;app&quot;&gt;\n      请输入一个字符串: &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;msg&quot; &#x2F;&gt; &lt;br &#x2F;&gt;\n      &lt;!-- 反转字符串的思路\n        1. 取出字符串中的每个字符 msg.split(&#39;&#39;) 形成一个数组\n        2. 反转数据. msg.split(&#39;&#39;).reverse() 形成一个反转数组\n        3. 将反转数组拼接. msg.split(&#39;&#39;).reverse().join(&#39;&#39;)\n      --&gt;\n      &lt;!-- 推荐使用 计算属性\n        1. 有缓存的. 当计算属性生成一次后, 挂载到vm实例. \n          后继的访问, 直接使用vm实例上的属性\n        2. 方便调试\n      --&gt;\n      &lt;h3&gt;反转后的字符串: &#123;&#123;reverseMsg&#125;&#125;&lt;&#x2F;h3&gt;\n      &lt;h3&gt;反转后的字符串: &#123;&#123;reverseMsg&#125;&#125;&lt;&#x2F;h3&gt;\n      &lt;h3&gt;反转后的字符串: &#123;&#123;reverseMsg&#125;&#125;&lt;&#x2F;h3&gt;\n      &lt;h3&gt;反转后的字符串: &#123;&#123;reverseMsg&#125;&#125;&lt;&#x2F;h3&gt;\n      &lt;h3&gt;反转后的字符串: &#123;&#123;reverseMsg&#125;&#125;&lt;&#x2F;h3&gt;\n    &lt;&#x2F;div&gt;\n\n    &lt;script&gt;\n      const vm &#x3D; new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n          msg: &#39;&#39;,\n        &#125;,\n        computed: &#123;\n          &#x2F;&#x2F; 编写一个函数, 这个函数会被做为该计算属性的getter\n          reverseMsg() &#123;\n            console.log(&#39;计算属性被执行了...&#39;)\n            &#x2F;&#x2F; 该函数的返回值, 做为访问计算属性的结果\n            return this.msg.split(&#39;&#39;).reverse().join(&#39;&#39;)\n          &#125;,\n        &#125;,\n      &#125;)\n    &lt;&#x2F;script&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n<p><a name=\"kpi31\"></a></p>\n<h3 id=\"4-特点\"><a href=\"#4-特点\" class=\"headerlink\" title=\"4) 特点\"></a>4) 特点</h3><p>:::info</p>\n<ol>\n<li>有缓存</li>\n<li>调试方便<br>:::</li>\n</ol>\n<p><a name=\"UuqO0\"></a></p>\n<h3 id=\"5-作业\"><a href=\"#5-作业\" class=\"headerlink\" title=\"5) 作业\"></a>5) 作业</h3><p><img src=\"https://blog4xk-1309331490.cos.ap-nanjing.myqcloud.com/markdown/1654746466409-a900d15f-21e6-4709-bc4b-564f6a9f05a5.png\" alt=\"图片.png\"><br><a name=\"dozWf\"></a></p>\n<h2 id=\"2-侦听器\"><a href=\"#2-侦听器\" class=\"headerlink\" title=\"2 侦听器\"></a>2 侦听器</h2><p><a name=\"XyPpp\"></a></p>\n<h3 id=\"1-什么是侦听器\"><a href=\"#1-什么是侦听器\" class=\"headerlink\" title=\"1) 什么是侦听器\"></a>1) 什么是侦听器</h3><p>:::info<br>可以通过watch配置项, 监听vm实例已经存在属性的改变<br>:::<br><a name=\"CIa7L\"></a></p>\n<h3 id=\"2-语法\"><a href=\"#2-语法\" class=\"headerlink\" title=\"2) 语法\"></a>2) 语法</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">watch: &#123;\n  &#x2F;&#x2F; 监听data中的firstName属性\n  firstName() &#123;\n   &#x2F;&#x2F; 执行一系列的操作\n  &#125;,\n&#125;,</code></pre>\n<p><a name=\"ak8mD\"></a></p>\n<h3 id=\"3-特点\"><a href=\"#3-特点\" class=\"headerlink\" title=\"3) 特点\"></a>3) 特点</h3><p>在watch对应的回调函数中, 可以获取到<code>新值</code>和 <code>旧值</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>示例</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const vm &#x3D; new Vue(&#123;\n  el: &#39;#app&#39;,\n  data: &#123;\n    firstName: &#39;&#39;,\n    lastName: &#39;&#39;,\n  &#125;,\n  &#x2F;&#x2F; 使用watch这个配置项\n  watch: &#123;\n    &#x2F;&#x2F; 在watch对应的回调函数中, 可以得到新值和旧值\n    &#x2F;&#x2F; 对于简单数据类型, 可以获取新旧值\n    &#x2F;&#x2F; 对于引用数据类型, 不能获取旧值\n    firstName(newValue, oldValue) &#123;\n      &#x2F;&#x2F; 一对多: 监听某一个属性的改变, 做一系列的操作\n      console.log(&#39;firstName改变了...&#39;)\n      console.log(&#39;新的值:&#39;, newValue)\n      console.log(&#39;旧的值:&#39;, oldValue)\n    &#125;,\n  &#125;,\n&#125;)</code></pre>\n<p><a name=\"cbUnF\"></a></p>\n<h3 id=\"4-深度侦听\"><a href=\"#4-深度侦听\" class=\"headerlink\" title=\"4) 深度侦听\"></a>4) 深度侦听</h3><p>默认情况下, watch只会侦听<code>data</code>中第一层的数据. 如果改变深层次的对象, 需要开启深度侦听</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">data: &#123;\n  lastName: &#39;&#39;,\n  firstName: &#39;&#39;,\n  fullName: &#39;&#39;,\n  obj: &#123;\n    a: &#123;\n      b: &#123;\n        c: &#39;1&#39;,\n      &#125;,\n    &#125;,\n  &#125;,\n&#125;,</code></pre>\n<p>此时, 侦听<code>obj</code>, 默认只有当obj重新赋值时, 才会触发回调</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">vm.obj &#x3D; &#39;111&#39;</code></pre>\n<p>如果改变<code>obj</code>内部的属性, 比如<code>vm.a.b.c = &#39;2&#39;</code>不会触发回调函数执行</p>\n<p>需要开启深度侦听</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">watch: &#123;\n  obj: &#123;\n    deep: true, &#x2F;&#x2F; 开启深度侦听\n    handler: function (newValue, oldValue) &#123;\n      &#x2F;&#x2F; 通过handler指定回调\n      &#x2F;&#x2F; 引用类型, 新旧值相同, 都是更新之后的数据\n      console.log(&#39;更新之前&#39;, oldValue)\n      console.log(&#39;更新之后&#39;, newValue)\n      \n      console.log(\n        &#39;开启深度侦听, 不管多少层, 只要数据变化, 都可以被侦听到...&#39;\n      )\n    &#125;,\n  &#125;,\n&#125;,</code></pre>\n<p><a name=\"JqfSe\"></a></p>\n<h2 id=\"3-区别\"><a href=\"#3-区别\" class=\"headerlink\" title=\"3 区别\"></a>3 区别</h2><ol>\n<li>是否会在vm实例中挂载新属性? <ol>\n<li>computed会</li>\n<li>watch不会</li>\n</ol>\n</li>\n<li>对应关系<ol>\n<li>computed是<code>多对一</code>, 可以同时监听多个值改变, 最终计算得到一个新的属性</li>\n<li>watch是<code>一对多</code>, 主要监听一个属性的变化, 执行多种逻辑</li>\n</ol>\n</li>\n<li>能否获取新旧值?<ol>\n<li>computed不能</li>\n<li>watch能<br><a name=\"cGzjc\"></a><h2 id=\"4-过滤器\"><a href=\"#4-过滤器\" class=\"headerlink\" title=\"4 过滤器\"></a>4 过滤器</h2></li>\n</ol>\n</li>\n</ol>\n<p><a name=\"VE60e\"></a></p>\n<h3 id=\"1-什么是过滤器\"><a href=\"#1-什么是过滤器\" class=\"headerlink\" title=\"1) 什么是过滤器\"></a>1) 什么是过滤器</h3><p>:::info<br>过滤器是一个<strong>函数</strong>, 主要完成对数据的格式化<br>:::<br><a name=\"ZXdJL\"></a></p>\n<h3 id=\"2-语法-1\"><a href=\"#2-语法-1\" class=\"headerlink\" title=\"2) 语法\"></a>2) 语法</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&#123;&#123; 表达式 | 过滤器1 | 过滤器2 ...&#125;&#125;</code></pre>\n<p>将表达式的结果作为过滤器1参数, 再将过滤器1的结果作为过滤器2的参数, 依次类推</p>\n<p><a name=\"Tjqrf\"></a></p>\n<h3 id=\"3-分类\"><a href=\"#3-分类\" class=\"headerlink\" title=\"3) 分类\"></a>3) 分类</h3><ul>\n<li>全局过滤器</li>\n<li>局部过滤器</li>\n</ul>\n<p><a name=\"lR0nm\"></a></p>\n<h3 id=\"4-示例\"><a href=\"#4-示例\" class=\"headerlink\" title=\"4) 示例\"></a>4) 示例</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;过滤器&lt;&#x2F;title&gt;\n    &lt;script src&#x3D;&quot;..&#x2F;node_modules&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div id&#x3D;&quot;app&quot;&gt;金额: &#123;&#123;price | formatPrice&#125;&#125;&lt;&#x2F;div&gt;\n\n    &lt;script&gt;\n      const vm &#x3D; new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n          price: 85,\n        &#125;,\n        filters: &#123;\n          formatPrice(value) &#123;\n            console.log(value)\n\n            return &#39;¥&#39; + value.toFixed(2) + &#39;元&#39;\n          &#125;,\n        &#125;,\n      &#125;)\n    &lt;&#x2F;script&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n<p><a name=\"DdbP9\"></a></p>\n<h2 id=\"5-作业-1\"><a href=\"#5-作业-1\" class=\"headerlink\" title=\"5 作业\"></a>5 作业</h2><p>:::warning<br><strong>需求</strong><br />实现如下购物车效果<br /><img src=\"https://blog4xk-1309331490.cos.ap-nanjing.myqcloud.com/markdown/1649735410027-da6f4ff4-663e-485a-8a64-d28fc5cec616.gif\" alt=\"购物车.gif\"><br>:::</p>\n","text":" 1 计算属性 1) 什么是计算属性:::info计算属性就是基于现有属性计算后的属性::: 2) 计算属性的作用计算属性用于对原始数据的再次加工 3) 案例:::warning需求实现如下效果::: 使用表达式实现&lt;!DOCTYPE html&gt; &lt;html l...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"Vue","slug":"Vue","count":16,"path":"api/categories/Vue.json"}],"tags":[{"name":"Vue2基础","slug":"Vue2基础","count":7,"path":"api/tags/Vue2基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">1 计算属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BB%80%E4%B9%88%E6%98%AF%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">1) 什么是计算属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">2) 计算属性的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">3) 案例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">使用表达式实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">使用方法实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">使用计算属性实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">4) 特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E4%BD%9C%E4%B8%9A\"><span class=\"toc-text\">5) 作业</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E4%BE%A6%E5%90%AC%E5%99%A8\"><span class=\"toc-text\">2 侦听器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BB%80%E4%B9%88%E6%98%AF%E4%BE%A6%E5%90%AC%E5%99%A8\"><span class=\"toc-text\">1) 什么是侦听器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">2) 语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">3) 特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%B7%B1%E5%BA%A6%E4%BE%A6%E5%90%AC\"><span class=\"toc-text\">4) 深度侦听</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">3 区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">4 过滤器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BB%80%E4%B9%88%E6%98%AF%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">1) 什么是过滤器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%AF%AD%E6%B3%95-1\"><span class=\"toc-text\">2) 语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">3) 分类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">4) 示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E4%BD%9C%E4%B8%9A-1\"><span class=\"toc-text\">5 作业</span></a></li></ol>","author":{"name":"团子","slug":"blog-author","avatar":"https://blog4xk-1309331490.cos.ap-nanjing.myqcloud.com/markdown/QQ%E5%9B%BE%E7%89%8720221205215218.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"一. 生命周期","uid":"d3464fcac232efa1ce28ee1ded5dad18","slug":"一.生命周期_new","date":"2022-12-02T10:59:46.142Z","updated":"2022-12-02T10:59:46.143Z","comments":true,"path":"api/articles/一.生命周期_new.json","keywords":null,"cover":[],"text":" 1 单组件的生命周期 1) 什么是生命周期:::info一个Vue实例从创建到销毁的整个过程::: Vue组件也可看成一个Vue实例 2) 生命周期函数(钩子):::info在生命周期中, 特定的时间点会被自动执行的函数::: beforeCreate() created() ...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"Vue","slug":"Vue","count":16,"path":"api/categories/Vue.json"}],"tags":[{"name":"Vue2进阶","slug":"Vue2进阶","count":10,"path":"api/tags/Vue2进阶.json"}],"author":{"name":"团子","slug":"blog-author","avatar":"https://blog4xk-1309331490.cos.ap-nanjing.myqcloud.com/markdown/QQ%E5%9B%BE%E7%89%8720221205215218.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}}},"next_post":{"title":"五. Vue模板语法","uid":"2bf64ee2a2c6d7942433bae3817e775f","slug":"五. Vue模板语法_new","date":"2022-12-02T08:05:49.083Z","updated":"2022-12-02T08:05:49.084Z","comments":true,"path":"api/articles/五. Vue模板语法_new.json","keywords":null,"cover":[],"text":" 1 简介 什么是模板 :::info由Vue解析的HTML字符串::: 什么是模板语法 :::info在模板字符串中, 具有特殊意义的语法::: 2 分类:::info模板语法分为 插值语法 指令语法::: 1) 插值语法 语法 在&#123;&#123;&#125;&#125...","link":"","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[{"name":"Vue","slug":"Vue","count":16,"path":"api/categories/Vue.json"}],"tags":[{"name":"Vue2基础","slug":"Vue2基础","count":7,"path":"api/tags/Vue2基础.json"}],"author":{"name":"团子","slug":"blog-author","avatar":"https://blog4xk-1309331490.cos.ap-nanjing.myqcloud.com/markdown/QQ%E5%9B%BE%E7%89%8720221205215218.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}}}}