{"title":"25_包概念_http协议_请求响应","uid":"3c7a1f4a7818f7c459334d17943f7066","slug":"day25_课堂笔记","date":"2022-12-01T13:40:54.834Z","updated":"2022-12-02T06:08:01.377Z","comments":true,"path":"api/articles/day25_课堂笔记.json","keywords":null,"cover":[],"content":"<h4 id=\"昨日回顾\"><a href=\"#昨日回顾\" class=\"headerlink\" title=\"昨日回顾\"></a>昨日回顾</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">nodejs\n\t概念\n\t\t提供了js代码的运行环境\n\t\t可以使用它来开发后台\n\t组成\n\t\tECMAScript语法\n\t\t内置模块\n\t\t第三方模块\n模块化编程\n\t概念\n\t\t按照固定的规则,把一个大的js文件拆分成若干个小文件(模块)\n\t好处\n\t\t提高代码的复用性,可维护性,按需加载,便于协同开发\n\t规则\n\t\t导入\n\t\t\trequire()\n\t\t导出\n\t\t\tmodule.exports\n\t\t\t\t和exports混用的时候问题:require()引入的永远是module.exports指向的对象\n分类\n\t内置模块\n\t\tfs,path,http\n\t自定义模块\n\t\t自己创建的js文件\n\t第三方模块\n\t\t第三方开发出来的,用之前需要下载\n作用域\n\t模块中的成员只能在当前模块内部访问,如果想要在外部使用,需要进行导出\n共享问题\n\t使用module.exports和exports都可以进行导出\n\trequire()引入的永远是module.exports指向的对象\n\t在一个模块中,不建议混用,习惯使用module.exports\n\n内置模块\n\tfs模块\n\t\t作用\n\t\t\t处理文件\n\t\t方法\n\t\t\treadFile(路径,编码,回调函数)\n\t\t\twriteFile(路径,数据,回调函数)\n\tpath模块\n\t\t作用\n\t\t\t处理路径的\n\t\t方法\n\t\t\tdirname()\n\t\t\tjoin()\n\t\t\textname()\n\t\t\tbasename()\n\thttp模块\n\t\t作用\n\t\t\t用来搭建web服务器\n\t\t方法\n\t\t\tcreateServer()</code></pre>\n\n\n\n<h4 id=\"包的操作\"><a href=\"#包的操作\" class=\"headerlink\" title=\"包的操作\"></a>包的操作</h4><h5 id=\"包的概念\"><a href=\"#包的概念\" class=\"headerlink\" title=\"包的概念\"></a>包的概念</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">来源\n\t跟内置模块和自定义模块不同,是由第三方个人或者团队开发出来的,免费给其他人使用\n\thttps:&#x2F;&#x2F;www.npmjs.com&#x2F;\n好处\n\t包其实是基于内置模块封装出来的,提供了一个更高级,更方便的API,提高了开发效率\n\t包和内置模块的关系,类似jquery和原生js之间的关系</code></pre>\n\n<h5 id=\"npm包管理工具\"><a href=\"#npm包管理工具\" class=\"headerlink\" title=\"npm包管理工具\"></a>npm包管理工具</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">概念\n\t是由美国的一家公司提供的,用来管理包的,现在已经被集成到nodejs中\n安装\n\t无需安装.在安装node的时候,已经自动安装了\n查看版本\n\tnpm -v 查看版本号\n安装第三方软件\n\tnpm i 包名              安装包\n\tnpm uninstall 包名      卸载包</code></pre>\n\n<h5 id=\"nrm镜像管理工具\"><a href=\"#nrm镜像管理工具\" class=\"headerlink\" title=\"nrm镜像管理工具\"></a>nrm镜像管理工具</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">概念\n\t解决国外网速慢的原因,可以使用国内的镜像\n使用\n\tnpm install nrm -g 安装镜像管理工具\n\tnrm ls 列出所有的镜像\n\tnrm use taobao 使用淘宝的镜像</code></pre>\n\n<h5 id=\"package规范\"><a href=\"#package规范\" class=\"headerlink\" title=\"package规范\"></a>package规范</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">组成\n\tnode-modules \n\t\t用来存放所有已经安装到本地的包,require导入第三方包的时候,都是从这个目录汇总查找\n\tpackage.json\n\t\t当前包的配置文件,用于记录当前包的下载信息,例如包名,版本号,下载地址\n\t\tname:包名\n\t\tversion:版本\n\t\tmain:包的入口\n规范\n\t1,包必须以单独的目录存在\n\t2,包的顶级目录下必须包含package.json配置文件\n\t3,package.json中必须包含name(包名),version(版本号),main(包的入口)三个属性\n\t\n手写一个包(计算器calc 计算两个数的加减法)\n\t1,创建文件夹\n\t\t在node-modules下创建一个calc文件夹\n\t2,初始化这个文件夹\n\t\t使用cd命令进入calc文件夹\n\t\t使用npm init -y来初始化这个包,会在calc下创建一个package.json的配置文件\n\t3,创建包的目录结构\n\t\t1,创建src文件夹,用于存储源码\n\t\t2,创建dist文件夹,用于发布目录\n\t\t3.在dist文件夹下创建一个index.js文件,就是程序的入口文件\n\t\t4,修改package.json配置文件中的main属性值为&#39;dist&#x2F;index.js&#39;\n\t4,编写源码(src下面)\n\t\t1,在src下创建一个add.js,实现加法,并用module.exports导出\n\t\t2,在src下创建一个sub.js,实现减法,并用module.exports导出\n\t5,编写头文件(dist文件夹下的index.js里面)\n\t\t将源码里面的文件都导入进去,然后module.exports导出\n\t\t这么做的目的是,将来只需要引入头文件,就可以将整个源码中的文件引入\n\t6,使用自定义的calc包\n\t\t1,导入 const calc &#x3D; require(&#39;calc&#39;);\n\t\t2,使用 const m1 &#x3D; calc.add(1,2)\n\t\t\n\t\t</code></pre>\n\n<h5 id=\"模块加载机制\"><a href=\"#模块加载机制\" class=\"headerlink\" title=\"模块加载机制\"></a>模块加载机制</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">加载步骤\n\t1,nodejs会假设它是一个内置模块  const calc &#x3D; require(&#39;calc&#39;);\n\t2,如果不是内置模块,就会去当前目录下的node_modules中查找\n\t3,首先看有么有该名字的js文件,如果有的话,就加载js文件\n\t4,如果没有该名字的js文件,就看是否有改名字的文件夹\n\t5,查看改文件夹中的package.json中的main选项,确定模块的入口文件\n\t6,如果进入文件夹之后,没有package.json文件,加载index.js\n\t7,如果连index.js文件都没有,就会报错\n\t\n加载注意\n\t1,模块在第一次加载后会被缓存,也就是多次调用require(),不会导致模块被加载多次\n\t2,不管是那种模块,都是优先从缓存中加载,从而提高加载速度\n\t3,内置模块是由nodejs官方提供,加载优先级最高\n\t\n一般规则\n\t--先内置模块\n\t--到node_modules中找\n\t--同名的js文件\n\t--同名的文件夹下的main指定的入口文件\n\t--同名的文件夹下的index.js</code></pre>\n\n\n\n<h4 id=\"服务器概念\"><a href=\"#服务器概念\" class=\"headerlink\" title=\"服务器概念\"></a>服务器概念</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">概念\n\t本质就是一台电脑,性能比个人电脑高很多\n\t\n\t负责存放和对外提供资源的电脑,叫做服务器\n\t负责获取和消费资源的电脑,叫做客户端\n\t\n网络通讯的三要素\n\tip:设备在网络中的唯一标识\n\t端口:程序在设备中的唯一标识\n\t协议:规定了浏览器和服务器之间数据的传输形式\n\t\t浏览器发什么样的数据给服务器,服务器才能解析\n\t\t服务器发什么样的数据给浏览器,浏览器才能解析</code></pre>\n\n\n\n<h4 id=\"URL地址\"><a href=\"#URL地址\" class=\"headerlink\" title=\"URL地址\"></a>URL地址</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">概念\n\t统一资源定位符,可以定位互联网上的唯一一个资源\n\thttps:&#x2F;&#x2F;detail.tmall.com:80&#x2F;item.htm?id&#x3D;653413567689  淘宝某一个商品的url地址\n\t\n组成\n\t通讯协议: https:&#x2F;&#x2F;\n\tip或者域名: detail.tmall.com (这个域名将来会被DNS域名解析器解析为一个ip地址)\n\t端口: 80(一般网站默认使用80端口)\n\t资源的名称(存放位置): item.htm?id&#x3D;653413567689\n\t\n\t学生管理系统首页页面: http:&#x2F;&#x2F;localhost:3000&#x2F;index.js</code></pre>\n\n<h4 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">概念\n\t超文本传输协议\n作用\n\t规定了客户端和服务端进行网络内容传输所遵循的规范\n\t浏览器传给服务器什么样格式的数据,服务器才能解析\n\t服务器传给浏览器什么样格式的数据,浏览器才能解析\n特点\n\t基于请求和响应模型\n\t必须先有请求,再有响应\n\t请求和响应成对出现的\n\t\t请求成功,200\n\t\t请求失败,404,500</code></pre>\n\n<h4 id=\"请求消息\"><a href=\"#请求消息\" class=\"headerlink\" title=\"请求消息\"></a>请求消息</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">概念\n\t客户端给服务器的消息,告诉服务器,我浏览器的一些信息\n组成\n\t请求行\n\t\t请求方式 请求的URI(统一资源标识符,前面没有协议) 协议版本\n\t\n\t请求头\n\t\tuser-agent:浏览器的版本型号\n\t\tcontent-type:发给服务器的数据格式\n\t\taccept:浏览器能够支持的返回内容的类型\n\t\taccept-language:浏览器期望获取自然语言的顺序\n\t请求体\n\t\t只有post请求方式才有\n\t\t\n常见的请求方式\n\tget请求\n\t\t数据拼接在地址栏后面,相对的不安全,只能拼接少量的数据\n\t\t一般用于从服务器获取数据(京东获取某个商品的详细信息,传一个商品的id)\n\tpost请求\n\t\t数据保存在请求体中,相对的安全,可以传递大量数据\n\t\t一般用于向服务器提交数据(表单,文件上传下载)</code></pre>\n\n<h4 id=\"响应消息\"><a href=\"#响应消息\" class=\"headerlink\" title=\"响应消息\"></a>响应消息</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">概念\n\t服务器发给客户端的信息,告诉浏览器我发给你的消息的数据类型及特点\n组成\n\t响应行\n\t\t格式: 协议版本 状态码 状态码描述\n\t响应头\n\t\tcontent-type:告诉浏览器,我发送数据的类型和编码\n\t\tcontent-length:发给浏览器内容的字节长度\n\t响应体\n\t\t将来显示到页面正文的内容\n\t\t\n常用的响应状态码\n\t2XX 成功 200\n\t3XX 重定向 302\n\t4XX 客户端错误 404\n\t5XX 服务端错误 500 \n\t\nrestful风格,通过不同的请求方式调用不同的方法,来实现不同的功能(后面会讲)\n\tget:查询(查询一个,查询所有)\n\tpost:新增\n\tput:修改\n\tdelete:删除</code></pre>\n\n\n\n<h4 id=\"请求响应对象\"><a href=\"#请求响应对象\" class=\"headerlink\" title=\"请求响应对象\"></a>请求响应对象</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">由来\n\t由于请求消息和响应消息,都是字符串,操作这些字符串很麻烦\n\tnode就将请求响应消息封装成了请求对象和响应对象\n分类\n\t请求对象(request对象)\n\t\t封装了请求消息,一般用于获取数据(获取请求方式request.getMethod,获取请求体)\n\t响应对象(response对象)\n\t\t封装了响应消息,一般用于设置数据(设置响应状态码)</code></pre>\n\n<p><img src=\"https://www.helloimg.com/images/2022/12/01/ZuOkF9.png\" alt=\"image-20220829173722158\"></p>\n<h4 id=\"请求响应流程\"><a href=\"#请求响应流程\" class=\"headerlink\" title=\"请求响应流程\"></a>请求响应流程</h4><p><img src=\"https://www.helloimg.com/images/2022/12/01/ZuOUKY.png\" alt=\"image-20220829173659992\"></p>\n","text":"昨日回顾nodejs 概念 提供了js代码的运行环境 可以使用它来开发后台 组成 ECMAScript语法 内置模块 第三方模块 模块化编程 概念 按照固定的规则,把一个大的js文件拆分成若干个小文件(模块) 好处 提高代码的复用性,可维护性,按需加载,便于协同开发 规则 导入 ...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"服务端","slug":"服务端","count":17,"path":"api/categories/服务端.json"}],"tags":[{"name":"http","slug":"http","count":2,"path":"api/tags/http.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%98%A8%E6%97%A5%E5%9B%9E%E9%A1%BE\"><span class=\"toc-text\">昨日回顾</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8C%85%E7%9A%84%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">包的操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8C%85%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">包的概念</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#npm%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">npm包管理工具</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#nrm%E9%95%9C%E5%83%8F%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">nrm镜像管理工具</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#package%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">package规范</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">模块加载机制</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">服务器概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#URL%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">URL地址</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HTTP%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">HTTP协议</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">请求消息</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%93%8D%E5%BA%94%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">响应消息</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">请求响应对象</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">请求响应流程</span></a></li></ol>","author":{"name":"团子","slug":"blog-author","avatar":"https://www.helloimg.com/images/2022/12/01/Zu250T.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"26_手写web服务_处理get_post请求参数","uid":"7bc9d1c1cb8c4ecce97b26cdf0cc3331","slug":"day26_课程笔记","date":"2022-12-01T13:46:15.874Z","updated":"2022-12-02T06:07:58.181Z","comments":true,"path":"api/articles/day26_课程笔记.json","keywords":null,"cover":[],"text":"昨日回顾内置模块 fs 处理文件 readFile() writeFile() path 处理路径 join() http 服务器相关 createServer() 包(第三方模块) 概念 由第三方个人或者团队开发出来的免费模块 作用 封装了内置模块,提高效率 使用 npm 包管...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"服务端","slug":"服务端","count":17,"path":"api/categories/服务端.json"}],"tags":[{"name":"http","slug":"http","count":2,"path":"api/tags/http.json"}],"author":{"name":"团子","slug":"blog-author","avatar":"https://www.helloimg.com/images/2022/12/01/Zu250T.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}}},"next_post":{"title":"Node快速入门","uid":"8ad32db149f95208d6fb34755e75039a","slug":"Node快速入门","date":"2022-12-01T13:38:48.627Z","updated":"2022-12-02T06:07:19.018Z","comments":true,"path":"api/articles/Node快速入门.json","keywords":null,"cover":[],"text":"一. Node概述1 Node是什么 Node是一个基于Chrome V8引擎的JavaScript代码运行环境 运行环境 浏览器（软件）能够运行JavaScript代码，浏览器就是JavaScript代码的运行环境 Node（软件）能够运行JavaScript代码，Node就是...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"服务端","slug":"服务端","count":17,"path":"api/categories/服务端.json"}],"tags":[{"name":"node","slug":"node","count":2,"path":"api/tags/node.json"}],"author":{"name":"团子","slug":"blog-author","avatar":"https://www.helloimg.com/images/2022/12/01/Zu250T.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}}}}