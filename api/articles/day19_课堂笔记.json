{"title":"19_预编译","uid":"c2ca0fd8b53bedb58b7bbb78ffccd016","slug":"day19_课堂笔记","date":"2022-12-01T13:03:31.746Z","updated":"2022-12-01T13:04:09.825Z","comments":true,"path":"api/articles/day19_课堂笔记.json","keywords":null,"cover":null,"content":"<h4 id=\"昨日回顾\"><a href=\"#昨日回顾\" class=\"headerlink\" title=\"昨日回顾\"></a>昨日回顾</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">DOM操作\n\t操作属性\n    \tprop()  固有属性\n    \t\t设置 prop(属性名,属性值)\n    \t\t获取 prop(属性名)\n    \tattr()  自定义属性\n    \t\t设置 attr(属性名,属性值)\n    \t\t获取 attr(属性名)\n\t操作样式\n\t\tcss方法\n\t\t\t获取 css(样式属性名)\n\t\t\t设置 css(样式属性名,属性值)\n\t\t类方法\n\t\t\taddClass()\n\t\t\tremoveClass() \n\t\t\ttoggleClass()\n\t操作文本\n\t\thtml() 标签体,有样式\n\t\t\t获取 jquery对象.html()\n\t\t\t设置 jquery对象.html(内容)\n\t\ttext() 标签体,有样式\n\t\t\t获取 jquery对象.text()\n\t\t\t设置 jquery对象.text(内容)\n\t\tval() 文本框\n\t\t\t获取 jquery对象.val()\n\t\t\t设置 jquery对象.val(内容)\n\t操作节点\n\t\t创建元素\n\t\t\t$(&#39;字符串类型的标签&#39;)\n\t\t添加元素\n\t\t\tappend() 末尾\n\t\t\tprepend() 前面\n\t\t删除元素\n\t\t\tremove() 删除\n\t效果\n\t\t显示和隐藏\n\t\t\tshow()\n\t\t\thide()\n\t\t\ttoggle()\n\t\t上拉和下拉滑动\n\t\t\tslideup()\n\t\t\tslidedown()\n\t\t\tslidetoggle()\n\t\t淡入淡出\n\t\t\tfadeIn()\n\t\t\tfadeOut()\n\t\t\tfadetoggle()\n\t\t\tfadeTo()\n\t遍历\n\t\tjquery对象.each(function(i,e)&#123;&#125;)\n\t\t$.each(jquery对象,function(i,e)&#123;&#125;)\n\t\t\n\t绑定和解绑\n\t\ton\n\t\t\t1,一次可以绑定多个不同类型的事件\n\t\t\t\tjquery对象.on(&#123;\n\t\t\t\t\t事件名称1:匿名函数1,\n\t\t\t\t\t事件名称2:匿名函数2\n\t\t\t\t&#125;)\n\t\t\t2,可以实现事件委托(将事件绑定到父元素上)\n\t\t\t3,可以实现动态绑定\n\t\t\t\tjquery对象.on(事件名称,子类元素的选择器,事件处理函数)</code></pre>\n\n<h4 id=\"全局对象GO\"><a href=\"#全局对象GO\" class=\"headerlink\" title=\"全局对象GO\"></a>全局对象GO</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">全局对象(GO对象)\n    在浏览器环境中, js引擎会整合所有的&lt;script&gt;标签中的内容, 产生&#96;window对象&#96;\n全局变量\n    在script标签中声明的变量\n全局函数\n\t在script标签中声明的函数\n关系\n    全局变量其实是作为全局对象(GO对象)的一个属性来存在的\n    全局函数其实是作为全局对象(GO对象)的一个方法来存在的</code></pre>\n\n<h4 id=\"活动对象AO\"><a href=\"#活动对象AO\" class=\"headerlink\" title=\"活动对象AO\"></a>活动对象AO</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">活动对象(AO对象)\n\t在函数被调用时产生的一个对象, 用来保存当前函数内部的执行环境\n局部变量\n\t在函数内部声明的变量\n局部函数\n\t在函数内部声明的函数\n关系\n\t局部变量其实是作为局部对象(AO对象)的一个属性来存在的\n\t局部函数其实是作为局部对象(AO对象)的一个方法来存在的</code></pre>\n\n<h4 id=\"全局预编译\"><a href=\"#全局预编译\" class=\"headerlink\" title=\"全局预编译\"></a>全局预编译</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">概念\n\t就是在全局环境下(script标签下),js引擎的预处理方式\n流程\n\t1,先查找变量的声明,作为GO对象的属性名,值为undefined\n\t2,再查找函数的声明,作为GO对象的属性名,值为function\n\t3,从上到下依次执行(声明的语句就会被略过)\n结论\n\t在全局环境中,如果存在同名的变量和函数,函数的优先级高</code></pre>\n\n<h4 id=\"函数预编译\"><a href=\"#函数预编译\" class=\"headerlink\" title=\"函数预编译\"></a>函数预编译</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">概念\n\t就是在局部环境下(函数里面),js引擎的预处理方法\n流程\n\t1,在函数被调用的那一刻,就会为当前函数产出AO对象\n\t2,查找形参和变量的声明作为AO对象的属性名,值为undefined\n\t3,使用实参的值,替换形参的值\n\t4,查找函数的声明,作为AO对象的属性名,值为function\n\t5,从上到下依次执行函数体</code></pre>\n\n\n\n<h4 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h4><h4 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h4><h4 id=\"原型和this指向\"><a href=\"#原型和this指向\" class=\"headerlink\" title=\"原型和this指向\"></a>原型和this指向</h4>","text":"昨日回顾DOM操作 操作属性 prop() 固有属性 设置 prop(属性名,属性值) 获取 prop(属性名) attr() 自定义属性 设置 attr(属性名,属性值) 获取 attr(属性名) 操作样式 css方法 获取 css(样式属性名) 设置 css(样式属性名,属性...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"前端三剑客","slug":"前端三剑客","count":24,"path":"api/categories/前端三剑客.json"}],"tags":[{"name":"javascript","slug":"javascript","count":16,"path":"api/tags/javascript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%98%A8%E6%97%A5%E5%9B%9E%E9%A1%BE\"><span class=\"toc-text\">昨日回顾</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1GO\"><span class=\"toc-text\">全局对象GO</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B4%BB%E5%8A%A8%E5%AF%B9%E8%B1%A1AO\"><span class=\"toc-text\">活动对象AO</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E9%A2%84%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">全局预编译</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E9%A2%84%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">函数预编译</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">作用域</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE\"><span class=\"toc-text\">作用域链</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E5%92%8Cthis%E6%8C%87%E5%90%91\"><span class=\"toc-text\">原型和this指向</span></a></li></ol>","author":{"name":"团子","slug":"blog-author","avatar":"https://www.helloimg.com/images/2022/12/01/Zu250T.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"javaScript高级","uid":"757df1fd86f1866fcfb8bc703ef31782","slug":"JavaScript高级","date":"2022-12-01T13:05:46.773Z","updated":"2022-12-01T13:08:16.625Z","comments":true,"path":"api/articles/JavaScript高级.json","keywords":null,"cover":[],"text":"1 - 预编译概念1) 什么是预编译首先, 我们要知道Javascript是解释性语言 解释性: 逐行解析, 逐行执行 那么, 什么是预编译呢? 在Javascript真正被解析之前, js解析引擎会首先把整个文件进行预处理, 以消除一些歧义. 这个预处理的过程就被称为预编译 示...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"前端三剑客","slug":"前端三剑客","count":24,"path":"api/categories/前端三剑客.json"}],"tags":[{"name":"javascript","slug":"javascript","count":16,"path":"api/tags/javascript.json"}],"author":{"name":"团子","slug":"blog-author","avatar":"https://www.helloimg.com/images/2022/12/01/Zu250T.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}}},"next_post":{"title":"18_juery操作和属性","uid":"f6ef7836a37fb0cf1951b89b46effc56","slug":"day18_课堂笔记","date":"2022-12-01T12:41:34.942Z","updated":"2022-12-01T12:49:37.123Z","comments":true,"path":"api/articles/day18_课堂笔记.json","keywords":null,"cover":null,"text":"昨日回顾jquery 概念 js的函数库 作用 选取元素 操作dom 添加一些特效 ajax 使用 先引入(本地或者网络) 语法 $(匿名函数) 入口函数,将来页面加载完成之后,就可以调用匿名函数中的代码 $(dom元素) 可以将js对象转成jquery对象 $(选择器) 选择指...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"前端三剑客","slug":"前端三剑客","count":24,"path":"api/categories/前端三剑客.json"}],"tags":[{"name":"javascript","slug":"javascript","count":16,"path":"api/tags/javascript.json"}],"author":{"name":"团子","slug":"blog-author","avatar":"https://www.helloimg.com/images/2022/12/01/Zu250T.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}}}}