{"title":"24_node概念_模块化_内置模块","uid":"d15fe50aabdeda8cc871dc1941f0910d","slug":"day24_课程笔记","date":"2022-12-01T13:34:25.200Z","updated":"2022-12-01T13:38:31.658Z","comments":true,"path":"api/articles/day24_课程笔记.json","keywords":null,"cover":null,"content":"<h4 id=\"昨日回顾\"><a href=\"#昨日回顾\" class=\"headerlink\" title=\"昨日回顾\"></a>昨日回顾</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">单表约束\n\t主键约束\n\t非空约束\n\t唯一约束\n多表约束\n\t外键\n单表查询\n\t查询所有\n\t条件查询\n\t模糊查询\n\t聚合函数查询\n\t分组查询\n\t排序查询\n\t分页查询\n\t书写顺序\n\t\tselect -- from -- where -- group by -- having -- order by -- limit\n\t执行顺序\n\t\tfrom -- where -- group by -- having -- select -- order by -- limit\n多表关系\n\t一对一\n\t\t在任意一方添加外键指向另一方的主键,并且让外键唯一\n\t一对多\n\t\t在多的一方添加外键指向一的一方的主键\n\t多对多\n\t\t建立一个中间表,至少有两个字段,分别作为外键指向多的一方的主键\n多表查询\t\n\t交叉查询\n\t\t笛卡尔值,是其他查询的基础\n\t内连接查询\n\t\t两张表的交集\n\t外连接查询\n\t\t左外连接\n\t\t\t左边的全部+交集\n\t\t右外连接\n\t\t\t右边的全部+交集\n\t子查询\n\t\t结果是单行单列: &gt; &#x3D; &lt; 连接\n\t\t结果是多行单列: in any all exists\n\t\t结果是多行多列: 当作一个虚拟的表来参与查询\n\t自关联查询\n\t\t特殊表,将一张表当作两张表用,起不同的别名,加上关联条件\n\t\t\n\t内连接查询\n\t\t1,要查什么\n\t\t2,查这些需要动用哪几张表\n\t\t3,搞清表与表之间的关联关系</code></pre>\n\n<h4 id=\"Node概念\"><a href=\"#Node概念\" class=\"headerlink\" title=\"Node概念\"></a>Node概念</h4><h5 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">简单的说 Node.js 就是运行在服务端的 JavaScript。\nNode.js 是一个基于 Chrome JavaScript 运行时建立的一个平台。\nNode.js 是一个事件驱动 I&#x2F;O 服务端 JavaScript 环境，基于 Google 的 V8 引擎，V8 引擎执行 Javascript 的速度非常快，性能非常好。</code></pre>\n\n<h5 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">1,提供了js的运行环境(就是保证代码正常运行所必要的环境,他提供了很多内置模块保证js代码的执行)\n2,可以通过js来开发后台(很早的一种方式,成本比较低)</code></pre>\n\n<h5 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">ECMAScript\n\t和js中的基础语法是一样的\n内置模块\n\tfs 文件相关模块\n\tpath 路径相关模块\n\thttp 服务器相关\n第三方模块\n\texpress 路由,可以快速构建web应用\n\tmysql 可以通过js代码操作mysql数据库</code></pre>\n\n<h5 id=\"学习路径\"><a href=\"#学习路径\" class=\"headerlink\" title=\"学习路径\"></a>学习路径</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">js\n\tECMAScript基础语法+浏览器的内置对象(DOM+BOM)+第三方库(jquery)\nnode\n\tECMAScript基础语法+内置模块(fs,path,http)+第三方模块(express,mysql等)</code></pre>\n\n\n\n<h4 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h4><h5 id=\"模块化概念\"><a href=\"#模块化概念\" class=\"headerlink\" title=\"模块化概念\"></a>模块化概念</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">概念\n\t遵循固定的规则,把一个大文件,拆成独立并且相互依赖的多个小文件(把代码进行模块化拆分)\n\t也是一个封装的思想,类似于函数(方法),都是对代码的封装\n\t但是函数和方法都只能在当前文件中使用,无法跨文件使用\n\t所以模块化就解决了这个文件,他其实是把代码放在一个单独的js文件中\n\t这样就可以跨文件使用,就是模块化的思想\n好处\n\t提高代码的复用性\n\t提高代码的可维护性\n\t可以实现按需加载</code></pre>\n\n<h5 id=\"模块化分类\"><a href=\"#模块化分类\" class=\"headerlink\" title=\"模块化分类\"></a>模块化分类</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">根据模块的来源不同\n\t内置模块\n\t\t由node官方提供的,例如 fs,path,http等\n\t自定义模块\n\t\t用户自己创建的每一个js文件,都是自定义模块\n\t第三方模块\n\t\t由第三方开发出来的,并且是官方提供的,使用之前需要下载</code></pre>\n\n<h5 id=\"模块化使用\"><a href=\"#模块化使用\" class=\"headerlink\" title=\"模块化使用\"></a>模块化使用</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">1,写一个js文件\n\t其实就是创建了一个自定义模块\n2,通过require(路径)方法加载自定义模块\n\t其实就是把刚才写好的模块复制进去</code></pre>\n\n<h5 id=\"模块作用域\"><a href=\"#模块作用域\" class=\"headerlink\" title=\"模块作用域\"></a>模块作用域</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">概念\n\t在自定义模块中,定义的变量,方法等成员,只能在当前模块使用\n全局变量污染问题\n\t\n\t1,传统方式引入模块\n\t\t模块1:let num &#x3D; 10\n\t\t模块2:let num &#x3D; 20\n\t\t\n\t\t在html中引入这两个模块\n\t\t\t&lt;script src&#x3D;&quot;.&#x2F;05_模块作用域_全局变量1_没有导出.js&quot;&gt;&lt;&#x2F;script&gt;\n\t\t\t&lt;script src&#x3D;&quot;.&#x2F;06_模块作用域_全局变量2_没有导出.js&quot;&gt;&lt;&#x2F;script&gt;\n\n\t\t运行的时候,就会报错,报变量重复定义,就出现全局变量的污染问题\n\t\t\n\t2,node引入模块化的规范(模块中的变量不能直接跨模块访问,必须要先导出,再导入)\n\t\t模块1:\n\t\t\tlet num &#x3D; 10\n\t\t\tmodule.exports.num &#x3D; num  &#x2F;&#x2F;导出\n\t\t模块2:\n\t\t\tlet num &#x3D; 20\n\t\t\tmodule.exports.num &#x3D; num\n\t\t\t\n\t\t引入模块1和模块2(必须要定义两个不同的变量来接收,这样num就存在于这两个变量中)\n\t\t\tconst n1 &#x3D; require(&#39;.&#x2F;08_模块作用域_全局变量1_有导出&#39;);\n\t\t\tconst n2 &#x3D; require(&#39;.&#x2F;09_模块作用域_全局变量2_有导出&#39;);\n\t\t\tconsole.log(n1.num);\n\t\t\tconsole.log(n2.num);\n\t\n\t结论\n\t\t因为不同的模块中,可能定义相同的变量名或者方法名,如果模块间能直接访问,就会出现冲突问题\n\t\t为了避免这种情况,node定义了一个规范,模块中的变量和方法只能在当前模块中访问,如果想跨\t\t 模块使用,必须先导出,再导入才能使用</code></pre>\n\n<h5 id=\"模块间共享\"><a href=\"#模块间共享\" class=\"headerlink\" title=\"模块间共享\"></a>模块间共享</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">module对象\n\t在每一个自定义模块中,都有一个module对象,他里面存储了和当前模块相关的信息\n\texports: &#123;&#125; &#x2F;&#x2F;这属性就是用来导出数据的,默认是&#123;&#125;\n\t\nmodule.exports对象\n\t这个对象的作用就是将模块中的成员共享出去,供外界使用\n\t将来外界既可以通过 require()方法导入自定义模块,进而拿到module.exports共享的数据\n\t\nexports对象\n\t由于module.exports单词写起来比较复杂,为了简化书写,node提供了exports对象\n\t默认情况下,module.exports对象和exports对象指向同一个对象\n\t\nmodule.exports和exports 使用误区\n\t使用require导入模块的时候,永远以module.exports指向的对象为准\n\t为了防止混乱,不要在同一个模块中同时使用exports和module.exports\n\t一般习惯使用module.exports对象</code></pre>\n\n\n\n<h4 id=\"内置模块\"><a href=\"#内置模块\" class=\"headerlink\" title=\"内置模块\"></a>内置模块</h4><h5 id=\"fs模块\"><a href=\"#fs模块\" class=\"headerlink\" title=\"fs模块\"></a>fs模块</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">概念\n\t官方提供的用于操作文件的模块.提供一系列操作文件的属性和方法,方便用户操作文件\n\t\n使用\n\t1,导入\n\t\tconst fs &#x3D; require(&#39;fs&#39;)\n\t2,调用方法\n\t\tfs.readFile() 读取指定文件的数据\n\t\tfs.writeFile() 向指定的文件写入数据\n\t\t\n语法\n\tfs.readFile(path[, options], callback)\n\t\tpath:文件路径,必要参数\n\t\toptions:编码等可选操作\n\t\tcallback:回调函数(读取文件完成之后,调用的函数)\n\t\t\n\tfs.writeFile(path, data[, options], callback)\n\t\tpath:文件路径,必要参数\n\t\tdata:要写入的数据,必要参数\n\t\toptions:编码等可选操作\n\t\tcallback:回调函数(读取文件完成之后,调用的函数)</code></pre>\n\n<h5 id=\"path模块\"><a href=\"#path模块\" class=\"headerlink\" title=\"path模块\"></a>path模块</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">概念\n\t用于处理路径的模块,提供了处理文件和目录路径的实用工具\n方法\n\tpath.dirname(p)返回路径中代表文件夹的部分\n\tpath.join([path1][, path2][, ...])用于连接路径。\n\tpath.extname(p) 返回路径中文件的后缀名\n\tpath.basename(p[, ext])返回路径中最后一部分,如果第二个参数传后缀名,获取出来的就没后缀</code></pre>\n","text":"昨日回顾单表约束 主键约束 非空约束 唯一约束 多表约束 外键 单表查询 查询所有 条件查询 模糊查询 聚合函数查询 分组查询 排序查询 分页查询 书写顺序 select -- from -- where -- group by -- having -- order by -- ...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"Node","slug":"Node","count":2,"path":"api/categories/Node.json"}],"tags":[{"name":"node","slug":"node","count":2,"path":"api/tags/node.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%98%A8%E6%97%A5%E5%9B%9E%E9%A1%BE\"><span class=\"toc-text\">昨日回顾</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Node%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">Node概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">概念</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">作用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BB%84%E6%88%90\"><span class=\"toc-text\">组成</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">学习路径</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E5%8C%96\"><span class=\"toc-text\">模块化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E5%8C%96%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">模块化概念</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E5%8C%96%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">模块化分类</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E5%8C%96%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">模块化使用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">模块作用域</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E9%97%B4%E5%85%B1%E4%BA%AB\"><span class=\"toc-text\">模块间共享</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">内置模块</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#fs%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">fs模块</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#path%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">path模块</span></a></li></ol></li></ol>","author":{"name":"团子","slug":"blog-author","avatar":"https://www.helloimg.com/images/2022/12/01/Zu250T.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Node快速入门","uid":"8ad32db149f95208d6fb34755e75039a","slug":"Node快速入门","date":"2022-12-01T13:38:48.627Z","updated":"2022-12-01T13:39:17.691Z","comments":true,"path":"api/articles/Node快速入门.json","keywords":null,"cover":[],"text":"一. Node概述1 Node是什么 Node是一个基于Chrome V8引擎的JavaScript代码运行环境 运行环境 浏览器（软件）能够运行JavaScript代码，浏览器就是JavaScript代码的运行环境 Node（软件）能够运行JavaScript代码，Node就是...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"Node","slug":"Node","count":2,"path":"api/categories/Node.json"}],"tags":[{"name":"node","slug":"node","count":2,"path":"api/tags/node.json"}],"author":{"name":"团子","slug":"blog-author","avatar":"https://www.helloimg.com/images/2022/12/01/Zu250T.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}}},"next_post":{"title":"23_外键_多表关系_多表查询","uid":"037fa750d83c04acd7b65b954d7307d0","slug":"day23课程笔记","date":"2022-12-01T13:26:27.747Z","updated":"2022-12-01T13:49:24.227Z","comments":true,"path":"api/articles/day23课程笔记.json","keywords":null,"cover":null,"text":"昨日回顾数据库概念 存储数据的文件系统,通过标准的sql访问,方便对数据管理 安装 mysql Navicat 应用 一般一个项目创建一个数据库 一个实体创建一张表 一个对象的实例就是在表里面添加一条数据 sql 结构化的查询语句 DDL 定义语句 DML 操作语句 DQL 查询...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"后端","slug":"后端","count":14,"path":"api/categories/后端.json"}],"tags":[{"name":"sql","slug":"sql","count":3,"path":"api/tags/sql.json"}],"author":{"name":"团子","slug":"blog-author","avatar":"https://www.helloimg.com/images/2022/12/01/Zu250T.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}}}}