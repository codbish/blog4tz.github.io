{"title":"4、Vue和React的区别","uid":"5c4a517f312f359d9c867ffb751b4424","slug":"前端面试题-4、Vue和React的区别_new","date":"2022-12-05T08:58:31.395Z","updated":"2022-12-05T08:58:31.396Z","comments":true,"path":"api/articles/前端面试题-4、Vue和React的区别_new.json","keywords":null,"cover":[],"content":"<p><a name=\"OqtLH\"></a></p>\n<h2 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h2><ol>\n<li><p>都使用了Virtual DOM（虚拟DOM）<code>Virtual DOM + Diff算法</code>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>当ui更新时，根据render函数重新生成VNode(虚拟dom的节点)，再与原来的虚拟DOM进行对比，通过diff算法来更新真实的DOM</p></blockquote>\n</li>\n<li><p>都是用了组件化思想，流程基本一致。</p>\n</li>\n<li><p>都是 响应式的。</p>\n</li>\n<li><p>都提倡单向数据流<br><a name=\"pprUx\"></a></p>\n<h2 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h2><p><a name=\"TeEw7\"></a></p>\n<h3 id=\"1-核心思想不同\"><a href=\"#1-核心思想不同\" class=\"headerlink\" title=\"1.核心思想不同\"></a>1.核心思想不同</h3><p>:::tips</p>\n</li>\n</ol>\n<ul>\n<li>Vue推崇渐进式开发体验，数据可变，双向数据绑定</li>\n<li>React推崇函数式编程，单向数据流<br>:::<br><a name=\"Gc1Zm\"></a><h3 id=\"2-框架本质不同\"><a href=\"#2-框架本质不同\" class=\"headerlink\" title=\"2.框架本质不同\"></a>2.框架本质不同</h3><code>**Vue**</code>本质是<code>**MVVM**</code>框架，由<code>**MVC**</code>发展而来；<br /><br><img src=\"https://blog4xk-1309331490.cos.ap-nanjing.myqcloud.com/markdown/1654528216682-72d4bf2c-44cc-46a8-8c1f-6c61f919912b.png\"><br><br /><code>**React**</code>是前端组件化框架，由后端组件化发展而来。<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>**React**</code>不是一个完整的MVC框架，最多可以认为是MVC中的（view）层，甚至React并不非常认可MVC开发模式；React构建页面UI的库。可以简单地理解为，React将界面分成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套、就成了我们的页面</p></blockquote>\n</li>\n</ul>\n<p><a name=\"NdrS3\"></a></p>\n<h3 id=\"3-监听数据变化实现的原理的不同\"><a href=\"#3-监听数据变化实现的原理的不同\" class=\"headerlink\" title=\"3.监听数据变化实现的原理的不同\"></a>3.监听数据变化实现的原理的不同</h3><ul>\n<li><code>**vue2**</code>通过<code>**Object.defineProperty**</code>来对<code>**data**</code>各个属性的<code>**getter/setter**</code>以及一些函数来监听数据的变化。</li>\n<li><code>**Vue3**</code>通过<code>**Proxy**</code>设定数据对象的代理对象来劫持数据的变化。</li>\n<li><code>**vue**</code>被劫持的数据会被收集到<code>**watcher**</code>里，当数据更新时，且在<code>**watcher**</code>里时，就会更新相关组件，否则不会更新。采用了数据劫持+观察者模式相结合的方式实现了双向绑定。</li>\n<li>而<code>**react**</code>则是通过比较引用(对象地址)的方式，来进行数据劫持。</li>\n</ul>\n<p><a name=\"Uzmia\"></a></p>\n<h3 id=\"4-组件通信的区别\"><a href=\"#4-组件通信的区别\" class=\"headerlink\" title=\"4.组件通信的区别\"></a>4.组件通信的区别</h3><p>相同点，推崇的都是单向数据流(vue1除外)</p>\n<ul>\n<li>Vue2，3父子组件通信是通过自定义属性和事件来实现的。跨多级组件通信通过 <code>**provide**</code>,<code>**inject**</code>来实现</li>\n<li>react则是通过自定义属性和传递方法(回调函数)实现的。跨多级组件通过<code>**context**</code> 实现。</li>\n</ul>\n<p><img src=\"https://blog4xk-1309331490.cos.ap-nanjing.myqcloud.com/markdown/1660979275862-18d9c9c3-7782-436e-90e9-4950c1b7f81a.jpeg\"><br><br /><br><img src=\"https://blog4xk-1309331490.cos.ap-nanjing.myqcloud.com/markdown/1660979414479-8417739d-a93d-4195-bfa7-641f70f65659.jpeg\"><br><a name=\"IpyrH\"></a></p>\n<h3 id=\"5-渲染方式的不同\"><a href=\"#5-渲染方式的不同\" class=\"headerlink\" title=\"5.渲染方式的不同\"></a>5.渲染方式的不同</h3><p>表层上：</p>\n<ul>\n<li>react通过jsx语法进行渲染</li>\n<li>vue通过模板语法(插值语法，指令语法)</li>\n</ul>\n<p>实现的方式上：</p>\n<ul>\n<li><p>react的渲染原理都是通过原生的js实现的，如条件渲染，通过三元表达式，列表渲染通过循环来实现</p>\n</li>\n<li><p>vue的渲染是通过一系列指令来实现的，如v-for，v-if，v-bind，v-on等<br><a name=\"sVTu1\"></a></p>\n<h3 id=\"6-渲染的过程不同\"><a href=\"#6-渲染的过程不同\" class=\"headerlink\" title=\"6.渲染的过程不同\"></a>6.渲染的过程不同</h3></li>\n<li><p>vue通过跟踪每一个组件的依赖关系，当组件的状态发生改变的时候，只会重新渲染改变的组件存在依赖关系的组件(父组件)，不会重新渲染整个组件树。</p>\n</li>\n<li><p>react 在父组件状态改变时，会更新所有的子组件。<br><a name=\"Xjj7G\"></a></p>\n<h3 id=\"7-HOC与mixins，组合不同的功能的方式不同\"><a href=\"#7-HOC与mixins，组合不同的功能的方式不同\" class=\"headerlink\" title=\"7.HOC与mixins，组合不同的功能的方式不同\"></a>7.HOC与mixins，组合不同的功能的方式不同</h3><p>先说结论，具体看下面的内容。</p>\n</li>\n</ul>\n<ol>\n<li>共同点<ol>\n<li>都是用于组件逻辑复用实现的一种方式</li>\n<li>都不会对原来的组件或状态有影响</li>\n</ol>\n</li>\n<li>不同点<ol>\n<li><code>**HOC**</code>，是一种对组件逻辑的加工，可以依据原来的逻辑生成新的逻辑功能</li>\n<li><code>**mixins**</code>是对不同功能的组合<br><a name=\"m9WcB\"></a><h4 id=\"HOC\"><a href=\"#HOC\" class=\"headerlink\" title=\"HOC\"></a>HOC</h4></li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>HOC高阶组件(<strong>实际上就是高阶函数–&gt;参数为函数，返回值为函数，还是一个纯函数</strong>)，并不是组件，是一个加工组件的函数，该函数会返回一个函数式组件，是复用组件逻辑的一种技巧。<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>纯函数详解：</p></blockquote>\n</li>\n</ul>\n<p><a href=\"https://www.yuque.com/docs/share/5670e3bd-12af-4fc4-bb91-80cd8ab72027?view=doc_embed\">纯函数</a></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>高阶函数示例</p></blockquote>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">import React from &#39;react&#39;;\n\nconst hoc &#x3D; (CountShow) &#x3D;&gt; &#123;\n  return (&#123; count &#125;) &#x3D;&gt; &#123;\n    return &lt;CountShow count&#x3D;&#123;count * 2&#125; &#x2F;&gt;;\n  &#125;;\n&#125;;\nexport default hoc;\n</code></pre>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">import React from &#39;react&#39;;\n\nconst CountShow &#x3D; (&#123; count &#125;) &#x3D;&gt; &#123;\n  return &lt;div&gt;show:&#123;count&#125;&lt;&#x2F;div&gt;;\n&#125;;\n\nexport default CountShow;</code></pre>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">import React from &#39;react&#39;;\nimport &#123; useState &#125; from &#39;react&#39;;\nimport CountShow from &#39;.&#x2F;components&#x2F;CountShow&#39;;\nimport hoc from &#39;.&#x2F;components&#x2F;Hoc&#39;;\nconst App &#x3D; () &#x3D;&gt; &#123;\n  const [count, setCount] &#x3D; useState(0);\n  const increment &#x3D; () &#x3D;&gt; &#123;\n    setCount(count + 1);\n  &#125;;\n  const DoubleCount &#x3D; hoc(CountShow);\n  return (\n    &lt;div&gt;\n      &lt;DoubleCount count&#x3D;&#123;count&#125; &#x2F;&gt;\n      &lt;CountShow count&#x3D;&#123;count&#125; &#x2F;&gt;\n      &lt;button onClick&#x3D;&#123;increment&#125;&gt;&#123;count&#125;&lt;&#x2F;button&gt;\n    &lt;&#x2F;div&gt;\n  );\n&#125;;\nexport default App;</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>高阶组件的好处，是可以复用组件的逻辑，提高代码的复用性以及组件的灵活性。以及是纯函数的关系，不会带来一些副作用如增加父子组件的级数。</p></blockquote>\n<p>高阶组件的两种实现方式：</p>\n<ol>\n<li>属性代理  –上面的示例就是属性代理</li>\n<li>反向继承  （与class组件有关，就不多说了，感兴趣的可以查阅资料）<br><a name=\"vYkX3\"></a><h4 id=\"mixins\"><a href=\"#mixins\" class=\"headerlink\" title=\"mixins\"></a>mixins</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>**mixins**</code> 是一个js对象，可以包含vue组件的任意功能选项，当组件引用<code>**mixins**</code>对象时，所有<code>**mixins**</code>对象的选项都将被混入该组件的本身的选项中，以便提高逻辑的复用。</p></blockquote>\n</li>\n</ol>\n<p><a name=\"QvtM5\"></a></p>\n<h3 id=\"8-Vuex和Redux\"><a href=\"#8-Vuex和Redux\" class=\"headerlink\" title=\"8.Vuex和Redux\"></a>8.Vuex和Redux</h3><ul>\n<li><code>**store**</code>的注入和使用上存在区别<ul>\n<li><code>**vuex3**</code>是直接将<code>**store**</code>注入到组件实例中，<strong>vuex4</strong>是通过<strong>hook</strong> <strong>useStore</strong>来访问<code>**store**</code>，通过<code>**mutation**</code>处理<strong>同步操作</strong>，<code>**action**</code>处理<strong>异步操作</strong>。</li>\n<li><code>**redux**</code> 通过action来处理同步操作，处理异步操作还需要使用中间件（<code>**redux-thunk**</code>）。</li>\n</ul>\n</li>\n<li><code>**state**</code>数据区别<ul>\n<li><code>**vuex**</code>使用的是可变数据，可以直接修改</li>\n<li><code>**redux**</code>数据是只读的，每次都是用新的<code>**state**</code>来替换旧的<code>**state**</code></li>\n</ul>\n</li>\n</ul>\n","text":" 相同点 都使用了Virtual DOM（虚拟DOM）Virtual DOM + Diff算法。 当ui更新时，根据render函数重新生成VNode(虚拟dom的节点)，再与原来的虚拟DOM进行对比，通过diff算法来更新真实的DOM 都是用了组件化思想，流程基本一致。 都是 ...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"GIS面试题","slug":"GIS面试题","count":29,"path":"api/categories/GIS面试题.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":5,"path":"api/tags/前端基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%90%8C%E7%82%B9\"><span class=\"toc-text\">相同点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%90%8C%E7%82%B9\"><span class=\"toc-text\">不同点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3%E4%B8%8D%E5%90%8C\"><span class=\"toc-text\">1.核心思想不同</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%A1%86%E6%9E%B6%E6%9C%AC%E8%B4%A8%E4%B8%8D%E5%90%8C\"><span class=\"toc-text\">2.框架本质不同</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%9B%91%E5%90%AC%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8E%9F%E7%90%86%E7%9A%84%E4%B8%8D%E5%90%8C\"><span class=\"toc-text\">3.监听数据变化实现的原理的不同</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">4.组件通信的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%B8%B2%E6%9F%93%E6%96%B9%E5%BC%8F%E7%9A%84%E4%B8%8D%E5%90%8C\"><span class=\"toc-text\">5.渲染方式的不同</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%B8%B2%E6%9F%93%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%8D%E5%90%8C\"><span class=\"toc-text\">6.渲染的过程不同</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-HOC%E4%B8%8Emixins%EF%BC%8C%E7%BB%84%E5%90%88%E4%B8%8D%E5%90%8C%E7%9A%84%E5%8A%9F%E8%83%BD%E7%9A%84%E6%96%B9%E5%BC%8F%E4%B8%8D%E5%90%8C\"><span class=\"toc-text\">7.HOC与mixins，组合不同的功能的方式不同</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HOC\"><span class=\"toc-text\">HOC</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#mixins\"><span class=\"toc-text\">mixins</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-Vuex%E5%92%8CRedux\"><span class=\"toc-text\">8.Vuex和Redux</span></a></li></ol></li></ol>","author":{"name":"团子","slug":"blog-author","avatar":"https://www.helloimg.com/images/2022/12/01/Zu250T.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"5、从输入地址从服务器响应发生了什么","uid":"f0f5aa46ad00cc3d771cfa1761c528eb","slug":"前端面试题-5、从输入地址从服务器响应发生了什么_new","date":"2022-12-05T09:10:01.818Z","updated":"2022-12-05T13:37:32.596Z","comments":true,"path":"api/articles/前端面试题-5、从输入地址从服务器响应发生了什么_new.json","keywords":null,"cover":[],"text":" ","link":"","photos":[],"count_time":{"symbolsCount":1,"symbolsTime":"1 mins."},"categories":[{"name":"GIS面试题","slug":"GIS面试题","count":29,"path":"api/categories/GIS面试题.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":5,"path":"api/tags/前端基础.json"}],"author":{"name":"团子","slug":"blog-author","avatar":"https://www.helloimg.com/images/2022/12/01/Zu250T.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}}},"next_post":{"title":"3、localStorage和sessionStorage及cookie之间的区别","uid":"fbd1c03b6dde10013525e18ed49a95c5","slug":"前端面试题-3、localStorage和sessionStorage及cookie之间的区别","date":"2022-12-05T08:22:09.684Z","updated":"2022-12-05T08:23:04.232Z","comments":true,"path":"api/articles/前端面试题-3、localStorage和sessionStorage及cookie之间的区别.json","keywords":null,"cover":null,"text":"实现多页应用之间各页面之间的通讯，主要有浏览器数据存储和服务器两种方式。浏览器数据存储的方式主要使用本地存储方式解决。即调用localStorage,Cookie等本地存储方式。服务器方式主要使用websocket浏览器存储Cookie,SessionStorage,LocalS...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"GIS面试题","slug":"GIS面试题","count":29,"path":"api/categories/GIS面试题.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":5,"path":"api/tags/前端基础.json"}],"author":{"name":"团子","slug":"blog-author","avatar":"https://www.helloimg.com/images/2022/12/01/Zu250T.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}}}}