{"title":"在前端页面调用api时的问题","uid":"73a4f8512e04fe7927935c7418b949d7","slug":"在前端页面调用api时的问题","date":"2022-11-30T19:16:44.834Z","updated":"2022-12-01T04:57:45.531Z","comments":true,"path":"api/articles/在前端页面调用api时的问题.json","keywords":null,"cover":null,"content":"<p>1.请求路径利用.env.development文件去实现url的统一化。<br>代码</p>\n<h1 id=\"env-development\"><a href=\"#env-development\" class=\"headerlink\" title=\".env.development\"></a>.env.development</h1><p>VITE_APP_BASE_API =’<a href=\"http://localhost:3000&#39;\">http://localhost:3000&#39;</a></p>\n<p>2.在request文件夹内，新建index.js文件，实现拦截器，用于封装所有请求的通用功能（get,post,patch,put..）<br>import axios from ‘axios’</p>\n<p>axios.defaults.baseURL = import.meta.env.VITE_APP_BASE_API<br>axios.defaults.timeout = 3000<br>/**</p>\n<ul>\n<li>http request 拦截器</li>\n<li>/<br>axios.interceptors.request.use(<br>  (config) =&gt; {<pre><code>config.data = JSON.stringify(config.data)\nconfig.headers = &#123;\n  &#39;Content-Type&#39;: &#39;application/json&#39;,\n&#125;\nreturn config\n</code></pre>\n  },<br>  (error) =&gt; {<pre><code>return Promise.reject(error)\n</code></pre>\n  }<br>)/**<ul>\n<li>http response 拦截器</li>\n<li>/<br>axios.interceptors.response.use(<br>(response) =&gt; {<br>  if (response.data.errCode === 2) {<pre><code>console.log(&#39;过期&#39;)\n</code></pre>\n  }<br>  return response<br>},<br>(error) =&gt; {<br>  console.log(‘请求出错：’, error)<br>}<br>)</li>\n</ul>\n/**<ul>\n<li>封装get方法</li>\n<li>@param url  请求url</li>\n<li>@param params  请求参数</li>\n<li>@returns {Promise}</li>\n<li>/<br>export function get(url, params = {}) {<br>return new Promise((resolve, reject) =&gt; {<br>  axios<pre><code>.get(url, &#123;\n  params: params,\n&#125;)\n.then((response) =&gt; &#123;\n  landing(url, params, response.data)\n  resolve(response.data)\n&#125;)\n.catch((error) =&gt; &#123;\n  reject(error)\n&#125;)\n</code></pre>\n})<br>}</li>\n</ul>\n/**<ul>\n<li>封装post请求</li>\n<li>@param url</li>\n<li>@param data</li>\n<li>@returns {Promise}</li>\n<li>/</li>\n</ul>\nexport function post(url, data) {<br>  return new Promise((resolve, reject) =&gt; {<pre><code>axios.post(url, data).then(\n  (response) =&gt; &#123;\n    //关闭进度条\n    resolve(response.data)\n  &#125;,\n  (err) =&gt; &#123;\n    reject(err)\n  &#125;\n)\n</code></pre>\n  })<br>}/**<ul>\n<li>封装patch请求</li>\n<li>@param url</li>\n<li>@param data</li>\n<li>@returns {Promise}</li>\n<li>/<br>export function patch(url, data = {}) {<br>return new Promise((resolve, reject) =&gt; {<br>  axios.patch(url, data).then(<pre><code>(response) =&gt; &#123;\n  resolve(response.data)\n&#125;,\n(err) =&gt; &#123;\n  msag(err)\n  reject(err)\n&#125;\n</code></pre>\n  )<br>})<br>}</li>\n</ul>\n/**<ul>\n<li>封装put请求</li>\n<li>@param url</li>\n<li>@param data</li>\n<li>@returns {Promise}</li>\n<li>/</li>\n</ul>\nexport function put(url, data = {}) {<br>  return new Promise((resolve, reject) =&gt; {<pre><code>axios.put(url, data).then(\n  (response) =&gt; &#123;\n    resolve(response.data)\n  &#125;,\n  (err) =&gt; &#123;\n    msag(err)\n    reject(err)\n  &#125;\n)\n</code></pre>\n  })<br>}//统一接口处理，返回数据<br>export default function (fecth, url, param) {<br>  let _data = ‘’<br>  return new Promise((resolve, reject) =&gt; {<pre><code>switch (fecth) &#123;\n  case &#39;get&#39;:\n    // console.log(&#39;begin a get request,and url:&#39;, url)\n    get(url, param)\n      .then(function (response) &#123;\n        resolve(response)\n      &#125;)\n      .catch(function (error) &#123;\n        // console.log(&#39;get request GET failed.&#39;, error)\n        reject(error)\n      &#125;)\n    break\n  case &#39;post&#39;:\n    post(url, param)\n      .then(function (response) &#123;\n        resolve(response)\n      &#125;)\n      .catch(function (error) &#123;\n        // console.log(&#39;get request POST failed.&#39;, error)\n        reject(error)\n      &#125;)\n    break\n  default:\n    break\n&#125;\n</code></pre>\n  })<br>}<br>/**</li>\n<li>查看返回的数据</li>\n<li>@param url</li>\n<li>@param params</li>\n<li>@param data</li>\n<li>/<br>function landing(url, params, data) {<br>  if (data.code === -1) {<br>  }<br>}</li>\n</ul>\n<p>3.对应事件写对应请求<br>import http from ‘./index’<br>export default {<br>  // 请求示例<br>  /* getBanner() {<br>    return new Promise((resolve, reject) =&gt; {<br>      http(‘get’, ‘/banner’).then(<br>        (res) =&gt; {<br>          resolve(res)<br>        },<br>        (error) =&gt; {<br>          reject(error)<br>        }<br>      )<br>    })<br>  }, */</p>\n<p>  // 获取所有公告<br>  getNotice() {<br>    return new Promise((resolve, reject) =&gt; {<br>      http(‘get’, ‘/gg_notice’).then(<br>        (res) =&gt; {<br>          resolve(res)<br>        },<br>        (error) =&gt; {<br>          reject(error)<br>        }<br>      )<br>    })<br>  },<br>  // 添加公告 data: {content,title,username}<br>  addNotice(data) {<br>    return new Promise((resolve, reject) =&gt; {<br>      http(‘post’, ‘/gg_notice’, data).then(<br>        (res) =&gt; {<br>          resolve(res)<br>        },<br>        (error) =&gt; {<br>          reject(error)<br>        }<br>      )<br>    })<br>  },<br>}</p>\n","text":"1.请求路径利用.env.development文件去实现url的统一化。代码 .env.developmentVITE_APP_BASE_API =’http://localhost:3000&#39; 2.在request文件夹内，新建index.js文件，实现拦截器，用于封...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":3,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"axios","slug":"axios","count":2,"path":"api/tags/axios.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#env-development\"><span class=\"toc-text\">.env.development</span></a></li></ol>","author":{"name":"团子","slug":"blog-author","avatar":"https://blog4xk-1309331490.cos.ap-nanjing.myqcloud.com/markdown/QQ%E5%9B%BE%E7%89%8720221205215218.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"01_html概念入门","uid":"8416d0c3a62e12a2fab3a68a80de7a85","slug":"day01_上课笔记","date":"2022-12-01T11:03:41.173Z","updated":"2022-12-01T11:10:39.513Z","comments":true,"path":"api/articles/day01_上课笔记.json","keywords":null,"cover":null,"text":"HTML概念超文本标记语言,主要用于描述一个页面 操作思想网页中有很多数据,不同的数据可能需要不同的展示效果,这个时候,就可以使用标签把要操作的数据包裹起来.通过修改标签的属性值,来实现标签内数据样式的改变 一个标签就相当于一个容器,想要修改容器内的数据样式,只需要修改容器的属性...","link":"","photos":[],"count_time":{"symbolsCount":721,"symbolsTime":"1 mins."},"categories":[{"name":"前端三剑客","slug":"前端三剑客","count":24,"path":"api/categories/前端三剑客.json"}],"tags":[{"name":"html","slug":"html","count":3,"path":"api/tags/html.json"}],"author":{"name":"团子","slug":"blog-author","avatar":"https://blog4xk-1309331490.cos.ap-nanjing.myqcloud.com/markdown/QQ%E5%9B%BE%E7%89%8720221205215218.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}}},"next_post":{"title":"箭头的缺点","uid":"84c5d95635333c1f19b7db5d1c2143cd","slug":"箭头的缺点","date":"2022-11-30T19:16:44.832Z","updated":"2022-12-01T04:57:29.413Z","comments":true,"path":"api/articles/箭头的缺点.json","keywords":null,"cover":null,"text":"1、函数内部没有arguments2、不兼容call,apply,bind3、不能作为对象的方法4、代码难以阅读1、arguments函数内部没有arguments/* 1、函数内部没有arguments /function go(){ console.log(arguments...","link":"","photos":[],"count_time":{"symbolsCount":606,"symbolsTime":"1 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":3,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"javascript","slug":"javascript","count":16,"path":"api/tags/javascript.json"}],"author":{"name":"团子","slug":"blog-author","avatar":"https://blog4xk-1309331490.cos.ap-nanjing.myqcloud.com/markdown/QQ%E5%9B%BE%E7%89%8720221205215218.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}}}}