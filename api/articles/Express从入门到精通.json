{"title":"Express从入门到精通","uid":"cb58856aab1bae0ffaf05d1a0e7fac83","slug":"Express从入门到精通","date":"2022-12-02T05:19:27.058Z","updated":"2022-12-02T06:05:59.919Z","comments":true,"path":"api/articles/Express从入门到精通.json","keywords":null,"cover":[],"content":"<p><a name=\"e9670cff\"></a></p>\n<h1 id=\"一-Express简介\"><a href=\"#一-Express简介\" class=\"headerlink\" title=\"一. Express简介\"></a>一. Express简介</h1><p>Express 是一个极简而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<a href=\"https://www.expressjs.com.cn/\">Express中文官网</a></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>为什么说Express是一个极简的框架</p></blockquote>\n<p>Express的核心只有两个部分</p>\n<ul>\n<li>路由</li>\n<li>中间件</li>\n</ul>\n<p>Express提供了基本的路由处理和中间件功能, 几乎所有功能的实现都由一个个独立的中间件完成</p>\n<p><a name=\"5248d71d\"></a></p>\n<h2 id=\"1-路由\"><a href=\"#1-路由\" class=\"headerlink\" title=\"1 路由\"></a>1 路由</h2><p>路由可以认为是一种找到数据的路径, 或者说是<strong>URL+处理函数</strong></p>\n<ul>\n<li>通过URL来区分不同的资源(页面或数据)</li>\n<li>通过处理函数来返回资源(页面或数据)</li>\n</ul>\n<p>前端通过URL请求数据.</p>\n<p>后端通过不同的路由, 调用对应的方法, 返回指定的数据</p>\n<p><img src=\"http://image.brojie.cn/image-20210202145701997.png#crop=0&crop=0&crop=1&crop=1&id=HqJc0&originHeight=903&originWidth=2192&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n<p><a name=\"654f28b6\"></a></p>\n<h2 id=\"2-中间件\"><a href=\"#2-中间件\" class=\"headerlink\" title=\"2 中间件\"></a>2 中间件</h2><p>顾名思义, 中间件就是在什么的中间</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在请求和响应中间的处理程序</p></blockquote>\n<p>有时候从请求到响应的业务比较复杂, 将这些复杂的业务拆开成一个个功能独立的函数, 就是<strong>中间件</strong></p>\n<p>对于处理请求来说，在响应发出之前，可以在请求和响应之间做一些操作，并且可以将这个处理结果传递给下一个函数继续处理</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">express 中间件函数，帮助拆解主程序的业务逻辑，\n并且每一个的中间件函数处理的结果都会传递给下一个中间件函数。\n就好比工厂里流水线工人清洗一个箱子:\n第一个人清洗侧面，第二个人清洗底面，第三个人清洗顶面，。。。\n这条流水线结束后，箱子也就清洗干净了\n各做各的，不相互影响，又彼此协作</code></pre>\n\n<p><img src=\"http://image.brojie.cn/image-20210202150246807.png#crop=0&crop=0&crop=1&crop=1&id=aCuZl&originHeight=1080&originWidth=2319&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n<p><a name=\"10bb92e6\"></a></p>\n<h1 id=\"二-安装及使用\"><a href=\"#二-安装及使用\" class=\"headerlink\" title=\"二. 安装及使用\"></a>二. 安装及使用</h1><p>express也是一个node的包, 可以npm来安装</p>\n<p><a name=\"36210fdf\"></a></p>\n<h2 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1 安装\"></a>1 安装</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm i express</code></pre>\n\n<p><a name=\"39ba6689\"></a></p>\n<h2 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2 使用\"></a>2 使用</h2><p>:::info<br><strong>步骤</strong></p>\n<ol>\n<li>导入express包</li>\n<li>实例化对象</li>\n<li>编写路由(中间件)</li>\n<li>监听端口<br>:::</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>示例</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 1. 引入express包\nconst express &#x3D; require(&#39;express&#39;)\n&#x2F;&#x2F; 2. 实例化对象\nconst app &#x3D; express()\n&#x2F;&#x2F; 3. 编写路由\napp.get(&#39;&#x2F;&#39;, function(req, res) &#123;\n  res.send(&#39;hello world&#39;)\n&#125;)\n&#x2F;&#x2F; 4. 监听端口\napp.listen(3000)</code></pre>\n\n<p><a name=\"acdccd2c\"></a></p>\n<h1 id=\"三-路由\"><a href=\"#三-路由\" class=\"headerlink\" title=\"三. 路由\"></a>三. 路由</h1><p>路由模块由三部分组成</p>\n<ul>\n<li> 请求方式 </li>\n<li> URL </li>\n<li> 处理函数 </li>\n</ul>\n<p>路由模块主要方法是 <a href=\"https://www.expressjs.com.cn/en/4x/api.html#app.METHOD\">app.METHOD</a><br /><img src=\"http://image.brojie.cn/image-20210202151411021.png#crop=0&crop=0&crop=1&crop=1&id=fb3hi&originHeight=1120&originWidth=1567&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>练习</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 需求:\n&#x2F;&#x2F;    1. 当GET请求&#x2F;或者&#x2F;index.html时, 返回 &#39;首页&#39;\n&#x2F;&#x2F;    2. 当GET请求&#x2F;list.html时, 返回 &#39;列表页&#39;\n&#x2F;&#x2F;    3. 当GET请求&#x2F;detail.html时, 返回 &#39;详情页&#39;\n&#x2F;&#x2F;    4. 其它情况 返回, &#39;404 Not Found&#39;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>示例</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 1. 导入express包\nconst express &#x3D; require(&#39;express&#39;)\n&#x2F;&#x2F; 2. 实例化app对象\nconst app &#x3D; express()\n&#x2F;&#x2F; 3. 编写路由(根据不同的path, 返回不同的内容)\napp.get(&#39;&#x2F;&#39;, function (req, res) &#123;\n  &#x2F;&#x2F; req: request(请求对象)\n  &#x2F;&#x2F; res: response(响应对象)\n  res.send(&#39;首页&#39;)\n&#125;)\napp.get(&#39;&#x2F;index.html&#39;, function (req, res) &#123;\n  res.send(&#39;首页&#39;)\n&#125;)\napp.get(&#39;&#x2F;list.html&#39;, function (req, res) &#123;\n  res.send(&#39;列表页&#39;)\n&#125;)\napp.get(&#39;&#x2F;detail.html&#39;, function (req, res) &#123;\n  res.send(&#39;详情页&#39;)\n&#125;)\napp.get(&#39;*&#39;, function (req, res) &#123;\n  res.send(&#39;404 Not Found&#39;)\n&#125;)\n&#x2F;&#x2F; 4. 监听端口\napp.listen(3000, function () &#123;\n  console.log(&#39;server is running on http:&#x2F;&#x2F;localhost:3000&#39;)\n&#125;)</code></pre>\n\n<p><a name=\"237c3836\"></a></p>\n<h2 id=\"1-请求方式\"><a href=\"#1-请求方式\" class=\"headerlink\" title=\"1 请求方式\"></a>1 请求方式</h2><p>请求方式就是HTTP协议的请求方式, 常见的有</p>\n<ul>\n<li>get: 对应<code>app.get()</code>–查询</li>\n<li>post: 对应<code>app.post()</code>–创建(新增)</li>\n<li>put: 对应<code>app.put()</code>–修改</li>\n<li>delete: 对应<code>app.delete()</code>–删除</li>\n</ul>\n<p><a name=\"d54670c3\"></a></p>\n<h2 id=\"2-URL\"><a href=\"#2-URL\" class=\"headerlink\" title=\"2 URL\"></a>2 URL</h2><p>URL的写法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 第一种, 不带参数\napp.get(&#39;&#x2F;users&#39;, function(req, res) &#123;\n  res.send(&#39;hello world&#39;)\n&#125;)\n&#x2F;&#x2F; 第二种, 带参数\napp.get(&#39;&#x2F;users&#x2F;:id&#39;, function(req, res) &#123;\n  res.send(&#39;hello world&#39;)\n&#125;)\n&#x2F;&#x2F; 第三种, 正则表达式, 以html结尾\n&#x2F;&#x2F; 请求index.html abc.html\napp.get(&#x2F;.html$&#x2F;, function(req, res) &#123;\n  res.send(&#39;hello world&#39;)\n&#125;)</code></pre>\n\n<p><a name=\"359675f4\"></a></p>\n<h2 id=\"3-处理函数\"><a href=\"#3-处理函数\" class=\"headerlink\" title=\"3 处理函数\"></a>3 处理函数</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>语法</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function(req, res, next) &#123;\n  &#x2F;&#x2F; todo\n&#125;</code></pre>\n\n<p>在处理函数中, 有两个形参</p>\n<ul>\n<li>req(请求对象)</li>\n<li>res(响应对象)</li>\n</ul>\n<p><a name=\"30f85c55\"></a></p>\n<h3 id=\"1-请求对象\"><a href=\"#1-请求对象\" class=\"headerlink\" title=\"1) 请求对象\"></a>1) 请求对象</h3><p>请求对象包含了一次请求中的所有数据(http请求头, 请求参数…)</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>示例</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">app.get(&#39;&#x2F;&#39;, function (req, res) &#123;\n  console.log(req)\n&#125;)</code></pre>\n\n<p><a name=\"7c332b44\"></a></p>\n<h3 id=\"2-获取请求参数\"><a href=\"#2-获取请求参数\" class=\"headerlink\" title=\"2) 获取请求参数\"></a>2) 获取请求参数</h3><p>常见的请求</p>\n<ul>\n<li>GET请求: 通过<code>URL</code><ul>\n<li><code>URL</code>的path部分, eg <code>/users/1</code></li>\n<li><code>URL</code>的queryString部分, eg <code>/users?page=1&amp;size=5</code></li>\n</ul>\n</li>\n<li>POST请求: 通过<code>body</code><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>语法</p></blockquote>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 对于GET请求的path传参\nreq.params\n&#x2F;&#x2F; 对于GET请求的queryString传参\nreq.query</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>示例: get请求</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 1.导入express包\nconst express &#x3D; require(&#39;express&#39;)\n&#x2F;&#x2F; 2.实例化app对象\nconst app &#x3D; express()\n&#x2F;&#x2F; 3.编写路由\n\n&#x2F;**\n * 获取用户id&#x3D;1的用户信息\n * GET &#x2F;users&#x2F;:id\n * eg. GET &#x2F;users&#x2F;1 返回&#123;id:1, name: &#39;xiaoming&#39;, age: 20&#125;\n *&#x2F;\napp.get(&#39;&#x2F;users&#x2F;:id&#39;, (req, res) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 请求对象(包含所有http请求信息)\n  console.log(req.params)\n  &#x2F;&#x2F; 查询数据库, 得到user对象, 返回\n  res.send(&#123;\n    id: 1,\n    name: &#39;xiaoming&#39;,\n    age: 20,\n  &#125;)\n&#125;)\n&#x2F;**\n * 获取所有用户(限定条件: 第1页,每页显示5条)\n * GET &#x2F;users\n * 请求参数 urlencoded [?page&#x3D;1&amp;size&#x3D;5]queryString\n * 响应数据 [&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;]\n *&#x2F;\napp.get(&#39;&#x2F;users&#39;, (req, res) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 通过req.query获取GET请求中的queryString的值\n  console.log(req.query)\n  res.send([\n    &#123; id: 1, name: &#39;xiaoming&#39; &#125;,\n    &#123; id: 2, name: &#39;xiaomei&#39; &#125;,\n    &#123; id: 3, name: &#39;xiaopang&#39; &#125;,\n  ])\n&#125;)\n&#x2F;&#x2F; 4.监听端口\napp.listen(3000)\n</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>示例: post请求</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 1. 导入express包\nconst express &#x3D; require(&#39;express&#39;)\n&#x2F;&#x2F; 2. 实例化app对象\nconst app &#x3D; express()\n&#x2F;&#x2F; 3. 编写路由\n&#x2F;**\n * 创建用户\n * POST &#x2F;users\n * 请求参数: &#123;name: &#39;xiaoming&#39;, age: 20&#125;\n * 响应: &#123;id: 5, name: &#39;xiaoming&#39;, age: 20&#125;\n *&#x2F;\napp.post(&#39;&#x2F;users&#39;, (req, res) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 解析req中的请求体参数\n  let postData &#x3D; &#39;&#39;\n  req.on(&#39;data&#39;, (data) &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 把所有的post的数据拼接\n    postData &#x3D; postData + data\n  &#125;)\n  req.on(&#39;end&#39;, () &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 当所有的数据接收完成\n    &#x2F;&#x2F; 将postData字符串-&gt;JSON格式的对象\n    const obj &#x3D; JSON.parse(postData)\n    console.log(obj) &#x2F;&#x2F; 在后端的控制台中观察(Cmd窗口)\n    res.send(obj) &#x2F;&#x2F; 将数据返回客户端(浏览器Network中观察)\n  &#125;)\n&#125;)\n&#x2F;&#x2F; 4. 监听端口\napp.listen(3000)\n</code></pre>\n\n<p>根据id查找对应的数据并返回</p>\n<p>编写<code>post.http</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">POST http:&#x2F;&#x2F;localhost:3000&#x2F;\nContent-Type: application&#x2F;json\n\n&#123;\n\t&quot;name&quot;: &quot;xiaoming&quot;\n&#125;</code></pre>\n\n<p><a name=\"13f2fdee\"></a></p>\n<h3 id=\"3-响应对象\"><a href=\"#3-响应对象\" class=\"headerlink\" title=\"3) 响应对象\"></a>3) 响应对象</h3><p>响应对象用于向客户端返回数据, 在处理函数中需要调用以返回数据<br /><img src=\"http://image.brojie.cn/image-20210202155218323.png#crop=0&crop=0&crop=1&crop=1&id=d6pIq&originHeight=717&originWidth=1540&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n<p>常用的有两个</p>\n<ul>\n<li>res.send(): 返回各种类型</li>\n<li>res.json(): 返回json格式的数据</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>作业</p></blockquote>\n<p>实现一个商品模块</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const db &#x3D; [\n  &#123;id: 1, name: &#39;iphone13&#39;, price: &#39;5299&#39;, number: &#39;10&#39;&#125;,\n  &#123;id: 2, name: &#39;MacBookPro M1&#39;, price: &#39;11999&#39;, number: &#39;20&#39;&#125;,\n  &#123;id: 3, name: &#39;iPad Pro&#39;, price: &#39;4899&#39;, number: &#39;30&#39;&#125;\n]</code></pre>\n\n<p>写5个接口</p>\n<ul>\n<li>获取所有数据</li>\n<li>根据id获取单个数据</li>\n<li>新增数据</li>\n<li>修改数据</li>\n<li>删除数据</li>\n</ul>\n<p><a name=\"b33f1d3c\"></a></p>\n<h1 id=\"四-中间件\"><a href=\"#四-中间件\" class=\"headerlink\" title=\"四. 中间件\"></a>四. 中间件</h1><p>中间件的设计模式符合软件工程中的经典模式 <code>CP</code> 模式</p>\n<ul>\n<li>Core: 核心</li>\n<li>Pulgin: 插件</li>\n</ul>\n<p>比如</p>\n<ul>\n<li>浏览器, 最核心的是浏览器, 可以通过插件扩展功能</li>\n<li>VSCode, 最核心的是代码编辑, 可能通过安装各种插件实现不同的功能</li>\n</ul>\n<p>这里的中间件类似于Plugin的作用. 可以通过使用中间件来实现丰富的功能<br><a name=\"8527532c\"></a></p>\n<h2 id=\"1-中间件类型\"><a href=\"#1-中间件类型\" class=\"headerlink\" title=\"1 中间件类型\"></a>1 中间件类型</h2><p><img src=\"http://image.brojie.cn/image-20210202155930582.png#crop=0&crop=0&crop=1&crop=1&id=V12OJ&originHeight=364&originWidth=1485&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"><br><a name=\"0934fe9c\"></a></p>\n<h2 id=\"2-应用级中间件\"><a href=\"#2-应用级中间件\" class=\"headerlink\" title=\"2 应用级中间件\"></a>2 应用级中间件</h2><p>在Express中, 使用<code>app.use</code>或者<code>app.METHOD</code>注册的中间件叫做<strong>应用级中间件</strong><br>:::info<br>中间件就是一个<strong>函数</strong><br>:::</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">app.use(&#39;path&#39;, function (req, res, next) &#123;\n  next()\n&#125;)</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在中间件中需要通过调用next()执行下一个中间件</p>\n<p>如果不执行next(), 也没有调用send(). 这次请求将会被挂起</p></blockquote>\n<p>中间件从影响范围上, 又分为<code>全局中间件</code>和<code>局部中间件</code><br><a name=\"c81e2ac8\"></a></p>\n<h3 id=\"1-全局中间件\"><a href=\"#1-全局中间件\" class=\"headerlink\" title=\"1) 全局中间件\"></a>1) 全局中间件</h3><p>一般, 使用<code>app.use</code> 注册全局中间件</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>全局中间件: 给每个路由规则都添加中间件处理函数</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">app.use(function (req, res, next) &#123;\n  console.log(&#39;我是一个全局中间件, 影响所有的路由规则&#39;)\n&#125;)</code></pre>\n\n<p><a name=\"0aa6f1c7\"></a></p>\n<h3 id=\"2-局部中间件\"><a href=\"#2-局部中间件\" class=\"headerlink\" title=\"2) 局部中间件\"></a>2) 局部中间件</h3><p>可以使用<code>app.use</code>或者<code>app.METHOD</code>注册局部中间件</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>局部中间件: 给某一个特定的路由规则添加中间件处理函数</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">app.use(&#39;&#x2F;users&#39;, function (req, res, next) &#123;\n  console.log(&#96;这里是一个局部中间件, 只影响&#x2F;users路由&#96;)\n  next()\n&#125;)</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>示例一</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 不写第一个参数, 给所有访问都注册了一个中间件\napp.use(function (req, res, next) &#123;\n  console.log(&#39;Time:&#39;, Date.now())\n  next()\n&#125;)</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>示例二</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">app.use(&#39;&#x2F;user&#x2F;:id&#39;, function (req, res, next) &#123;\n  console.log(&#39;Request Type:&#39;, req.method)\n  next()\n&#125;)\n\napp.get(&#39;&#x2F;user&#x2F;:id&#39;, function (req, res, next) &#123;\n  res.send(&#39;USER&#39;)\n&#125;)</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>示例三</p></blockquote>\n<p>可以同时注册多个中间件函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">app.use(&#39;&#x2F;user&#x2F;:id&#39;, function (req, res, next) &#123;\n  console.log(&#39;Request Type:&#39;, req.method)\n  next()\n&#125;, function (req, res, next) &#123;\n  console.log(&#39;Request Params:&#39;, req.params.id)\n  next()\n&#125;)\n\napp.get(&#39;&#x2F;user&#x2F;:id&#39;, function (req, res, next) &#123;\n  res.send(&#39;USER&#39;)\n&#125;)</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>示例四</p></blockquote>\n<p>app.use除了注册函数做为中间件外, 还可注册一个<code>express.Router()</code>对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const router &#x3D; express.Router()\napp.use(&#39;&#x2F;user&#x2F;:id&#39;, router)</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>作业</p></blockquote>\n<p>:::warning<br><strong>需求</strong></p>\n<ol>\n<li>编写一个中间件: 是一个全局中间件, 记录请求的时间 Date.now()</li>\n<li>编写一个中间件: 是一个局部中间件, 只有当匹配/users路由时执行. 记录请求的方法</li>\n<li>编写一个中间件: 是一个局部中间件, 只有当匹配/users/:id路由时执行. 记录id值</li>\n<li>当匹配/users/:id时执行, 返回 ‘用户的id是XX’<br>:::<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 全局中间件: app.use(全局中间件)\n * 局部中间件: app.use(&#39;路由&#39;, 局部中间件)\n *&#x2F;\nconst express &#x3D; require(&#39;express&#39;)\nconst app &#x3D; express()\n\n&#x2F;&#x2F; 编写一个中间件: 是一个全局中间件, 记录请求的时间 Date.now()\napp.use(function (req, res, next) &#123;\n  console.log(&#96;当前时间: $&#123;Date.now()&#125;&#96;)\n  next()\n&#125;)\n\n&#x2F;&#x2F; 处理 &#x2F;users 接口\n&#x2F;&#x2F; 编写一个中间件: 是一个局部中间件, 只有当匹配&#x2F;users路由时执行. 记录请求的方法\napp.use(&#39;&#x2F;users&#39;, function (req, res, next) &#123;\n  console.log(&#96;请求的方法是: $&#123;req.method&#125;&#96;)\n  next()\n&#125;)\napp.get(&#39;&#x2F;users&#39;, function (req, res) &#123;\n  res.send(&#39;用户信息...&#39;)\n&#125;)\n\n&#x2F;&#x2F; 处理 &#x2F;users&#x2F;:id 接口\napp.use(&#39;&#x2F;users&#x2F;:id&#39;, function (req, res, next) &#123;\n  console.log(&#96;请求的id是: $&#123;req.params.id&#125;&#96;)\n  next()\n&#125;)\napp.get(&#39;&#x2F;users&#x2F;:id&#39;, function (req, res) &#123;\n  res.send(&#96;用户的id是$&#123;req.params.id&#125;&#96;)\n&#125;)\n\n&#x2F;&#x2F; app.get(\n&#x2F;&#x2F;   &#39;&#x2F;users&#x2F;:id&#39;,\n&#x2F;&#x2F;   function (req, res, next) &#123;\n&#x2F;&#x2F;     console.log(&#96;请求的id是: $&#123;req.params.id&#125;&#96;)\n&#x2F;&#x2F;     next()\n&#x2F;&#x2F;   &#125;,\n&#x2F;&#x2F;   function (req, res) &#123;\n&#x2F;&#x2F;     res.send(&#96;用户的id是$&#123;req.params.id&#125;&#96;)\n&#x2F;&#x2F;   &#125;\n&#x2F;&#x2F; )\n\napp.listen(3000)\n</code></pre>\n<a name=\"be3bebab\"></a><h2 id=\"3-路由级中间件\"><a href=\"#3-路由级中间件\" class=\"headerlink\" title=\"3 路由级中间件\"></a>3 路由级中间件</h2></li>\n</ol>\n<p><code>express.Router()</code>对象也可以注册中间件.</p>\n<p>使用<code>router.use</code>或者<code>router.METHOD</code>注册的中间件叫做<strong>路由级中间件</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var app &#x3D; express()\nvar router &#x3D; express.Router()\n\nrouter.use(function (req, res, next) &#123;\n  console.log(&#39;Time:&#39;, Date.now())\n  next()\n&#125;)\nrouter.get(&#39;&#x2F;users&#x2F;&#39;, function(req, res) &#123;\n  res.send(&#39;hello&#39;)\n&#125;)</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>路由级中间件的应用</p></blockquote>\n<p>当路由很多的时候, 如果全部写在app入口会使用文件过大, 不好维护. 可以把不同的路由拆分成多个模块</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const express &#x3D; require(&#39;express&#39;)\nconst userRouter &#x3D; require(&#39;.&#x2F;routes&#x2F;users.js&#39;)\n\nconst app &#x3D; express()\napp.use(function (req, res, next) &#123;\n  console.log(req.url)\n  next()\n&#125;)\n&#x2F;&#x2F; 加载路由\napp.use(&#39;&#x2F;users&#39;, userRouter)\n\napp.listen(3000)</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const express &#x3D; require(&#39;express&#39;)\n\nconst router &#x3D; express.Router()\n\nrouter.get(&#39;&#x2F;&#39;, function(req, res) &#123;\n  &#x2F;&#x2F; 返回所有用户信息\n  const data &#x3D; [\n    &#123;id:1, username: &#39;xiaoming&#39;, age: 20&#125;,\n    &#123;id:2, username: &#39;xiaomei&#39;, age: 18&#125;,\n    &#123;id:3, username: &#39;xiaopang&#39;, age: 1&#125;,\n  ]\n  res.json(data)\n&#125;)\n\nrouter.get(&#39;&#x2F;:id&#39;, function(req, res) &#123;\n  &#x2F;&#x2F; 返回所有用户信息\n  const user &#x3D; &#123;id:1, username: &#39;xiaoming&#39;, age: 20&#125;\n  res.json(user)\n&#125;)\n\nmodule.exports &#x3D; router</code></pre>\n\n<p><a name=\"71cd23f3\"></a></p>\n<h2 id=\"5-小结\"><a href=\"#5-小结\" class=\"headerlink\" title=\"5 小结\"></a>5 小结</h2><p>路由级中间件的操作步骤<br>:::warning<br><strong>步骤</strong></p>\n<ol>\n<li>编写<code>routes/路由文件</code> <ol>\n<li>导入express包</li>\n<li>创建路由对象</li>\n<li>编写相关路由</li>\n<li>导出路由对象</li>\n</ol>\n</li>\n<li>在入口文件中导入路由对象</li>\n<li>注册中间件<br>:::</li>\n</ol>\n<p><a name=\"f78759d4\"></a></p>\n<h1 id=\"五-数据库操作\"><a href=\"#五-数据库操作\" class=\"headerlink\" title=\"五. 数据库操作\"></a>五. 数据库操作</h1><p><a name=\"07b769c5\"></a></p>\n<h2 id=\"1-安装mysql库\"><a href=\"#1-安装mysql库\" class=\"headerlink\" title=\"1 安装mysql库\"></a>1 安装mysql库</h2><p>参考npm包的官方文档<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25807822/1648607492443-10125014-5098-4e4f-8593-7dccd11d3384.png#clientId=u1fa0e007-48fb-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=479&id=u850aafa7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=718&originWidth=1135&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75815&status=done&style=none&taskId=u7e846eff-26a5-4c7a-85c4-9dffab50f2a&title=&width=756.6666666666666\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm i mysql</code></pre>\n\n<p><a name=\"02638bcc\"></a></p>\n<h2 id=\"2-入门案例\"><a href=\"#2-入门案例\" class=\"headerlink\" title=\"2 入门案例\"></a>2 入门案例</h2><p>操作数据库, 就是模拟客户端. 向MySQL的服务端发送SQL语句. 基本步骤如下:</p>\n<ol>\n<li>引入mysql包</li>\n<li>创建数据库连接</li>\n<li>连接数据库</li>\n<li>执行SQL查询</li>\n<li>关闭连接</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>示例</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 1. 引入mysql包\nconst mysql &#x3D; require(&#39;mysql&#39;)\n\n&#x2F;&#x2F; 2. 创建数据库连接\nconst con &#x3D; mysql.createConnection(&#123;\n  host: &#39;localhost&#39;,\n  user: &#39;root&#39;,\n  password: &#39;123456&#39;,\n  database: &#39;db&#39;\n&#125;)\n\n&#x2F;&#x2F; 3. 连接数据库\ncon.connect()\n\n&#x2F;&#x2F; 4. 执行查询\ncon.query(&#39;select * from student&#39;, function (err, res) &#123;\n  if (err) throw err\n\n  console.log(res)\n&#125;)\n\n&#x2F;&#x2F; 5. 关闭连接\ncon.end()</code></pre>\n\n<p><a name=\"1eeef1b1\"></a></p>\n<h2 id=\"3-集成到express\"><a href=\"#3-集成到express\" class=\"headerlink\" title=\"3 集成到express\"></a>3 集成到express</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>示例</p></blockquote>\n<p>获取所有的用户</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 1. 导入express包\nconst express &#x3D; require(&#39;express&#39;)\n&#x2F;&#x2F; 2. 实例化app对象\nconst app &#x3D; express()\n&#x2F;&#x2F; 3. 路由\n&#x2F;**\n * 获取所有的用户信息\n *&#x2F;\napp.get(&#39;&#x2F;users&#39;, function (req, res) &#123;\n  &#x2F;&#x2F; 导入mysql的包\n  const mysql &#x3D; require(&#39;mysql&#39;)\n  &#x2F;&#x2F; 创建连接\n  const con &#x3D; mysql.createConnection(&#123;\n    host: &#39;127.0.0.1&#39;,\n    user: &#39;root&#39;,\n    password: &#39;123456&#39;,\n    database: &#39;user&#39;,\n  &#125;)\n  &#x2F;&#x2F; 连接数据\n  con.connect()\n  &#x2F;&#x2F; 执行sql语句\n  let sql &#x3D; &#39;select * from student&#39;\n  con.query(sql, function (err, data) &#123;\n    if (err) throw err\n    &#x2F;&#x2F; 返回结果\n    res.send(data)\n  &#125;)\n&#125;)\n&#x2F;&#x2F; 4. 监听端口\napp.listen(3000)\n</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>练习</p></blockquote>\n<p>实现 <code>/users/:id</code>根据id获取用户信息</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>参考答案</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 根据id获取用户信息\n * GET &#x2F;users&#x2F;:id\n *&#x2F;\napp.get(&#39;&#x2F;users&#x2F;:id&#39;, function (req, res) &#123;\n  &#x2F;&#x2F; 一. 解析请求数据\n  const id &#x3D; req.params.id\n  &#x2F;&#x2F; 二. 操作数据库\n  &#x2F;&#x2F; 导入mysql的包\n  const mysql &#x3D; require(&#39;mysql&#39;)\n  &#x2F;&#x2F; 创建连接\n  const con &#x3D; mysql.createConnection(&#123;\n    host: &#39;127.0.0.1&#39;,\n    user: &#39;root&#39;,\n    password: &#39;123456&#39;,\n    database: &#39;user&#39;,\n  &#125;)\n  &#x2F;&#x2F; 连接数据\n  con.connect()\n  &#x2F;&#x2F; 执行sql语句\n  let sql &#x3D; &#96;select * from student where id&#x3D;$&#123;id&#125;&#96;\n  con.query(sql, function (err, data) &#123;\n    if (err) throw err\n    &#x2F;&#x2F; 返回结果\n    res.send(data)\n  &#125;)\n&#125;)</code></pre>\n<p>我们发现操作数据库部分的代码是重复的. <br />因此, 我们需要对这部分的内容进行封装(模块化编程的思想)</p>\n<p><a name=\"fGxBa\"></a></p>\n<h2 id=\"4-封装mysql\"><a href=\"#4-封装mysql\" class=\"headerlink\" title=\"4 封装mysql\"></a>4 封装mysql</h2><p>在src下创建<code>db/index.js</code>, 编写如下内容</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 封装数据库的操作\n&#x2F;&#x2F; 1. 导入mysql包\nconst mysql &#x3D; require(&#39;mysql&#39;)\n&#x2F;&#x2F; 2. 创建数据库连接\nconst con &#x3D; mysql.createConnection(&#123;\n  host: &#39;127.0.0.1&#39;,\n  port: 3306,\n  user: &#39;root&#39;,\n  password: &#39;123456&#39;,\n  database: &#39;db&#39;,\n&#125;)\n&#x2F;&#x2F; 3. 连接数据库\ncon.connect()\n\n&#x2F;&#x2F; 4. 编写操作\n&#x2F;**\n * 获取所有数据\n * @param &#123;string&#125; sql : 执行的sql语句\n * @return &#123;promise&#125;\n *&#x2F;\nfunction getAll(sql) &#123;\n  return new Promise((resolve, reject) &#x3D;&gt; &#123;\n    con.query(sql, (err, data) &#x3D;&gt; &#123;\n      if (err) reject(err)\n\n      resolve(data)\n    &#125;)\n  &#125;)\n&#125;\n\n&#x2F;**\n * 获取所有数据\n * @param &#123;string&#125; sql : 执行的sql语句\n * @return &#123;promise&#125;\n *&#x2F;\nfunction getOne(sql) &#123;\n  return new Promise((resolve, reject) &#x3D;&gt; &#123;\n    con.query(sql, (err, data) &#x3D;&gt; &#123;\n      if (err) reject(err)\n\n      &#x2F;&#x2F; data是一个数组\n      &#x2F;&#x2F; if (data.length !&#x3D; 0) &#123;\n      &#x2F;&#x2F;   &#x2F;&#x2F; 查询到了数据\n      &#x2F;&#x2F;   resolve(data[0])\n      &#x2F;&#x2F; &#125; else &#123;\n      &#x2F;&#x2F;   resolve(null)\n      &#x2F;&#x2F; &#125;\n      data.length !&#x3D; 0 ? resolve(data[0]) : resolve(null)\n    &#125;)\n  &#125;)\n&#125;\n\n&#x2F;**\n * 执行sql语句\n * @param &#123;string&#125; sql : 执行的sql语句\n * @return &#123;promise&#125;\n *&#x2F;\nfunction exec(sql) &#123;\n  return new Promise((resolve, reject) &#x3D;&gt; &#123;\n    con.query(sql, (err, data) &#x3D;&gt; &#123;\n      if (err) reject(err)\n\n      resolve(data)\n    &#125;)\n  &#125;)\n&#125;\n\n&#x2F;&#x2F; 暴露3个方法\nmodule.exports &#x3D; &#123;\n  getAll,\n  getOne,\n  exec,\n&#125;\n</code></pre>\n<p>封装后的操作</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 1. 导入express\nconst express &#x3D; require(&#39;express&#39;)\nconst &#123; getAll, getOne &#125; &#x3D; require(&#39;.&#x2F;db&#39;)\n&#x2F;&#x2F; 2. 实例化app对象\nconst app &#x3D; express()\n&#x2F;&#x2F; 3. 编写路由\n&#x2F;**\n * GET &#x2F;users: 获取所有的用户信息\n * 返回: [&#123;&#125;, &#123;&#125;, &#123;&#125;]\n *&#x2F;\n&#x2F;&#x2F; app.get(&#39;&#x2F;users&#39;, (req, res) &#x3D;&gt; &#123;\n&#x2F;&#x2F;   &#x2F;&#x2F; 完成数据库的操作\n&#x2F;&#x2F;   let sql &#x3D; &#96;select * from users&#96;\n&#x2F;&#x2F;   getAll(sql).then((data) &#x3D;&gt; &#123;\n&#x2F;&#x2F;     res.send(data)\n&#x2F;&#x2F;   &#125;)\n&#x2F;&#x2F; &#125;)\n\napp.get(&#39;&#x2F;users&#39;, async (req, res) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 完成数据库的操作\n  let sql &#x3D; &#96;select * from users&#96;\n  const data &#x3D; await getAll(sql)\n  res.send(data)\n&#125;)\n\n&#x2F;**\n * GET &#x2F;users&#x2F;:id 根据id获取单个用户的信息\n * 返回: &#123;&#125;\n *&#x2F;\n&#x2F;&#x2F; app.get(&#39;&#x2F;users&#x2F;:id&#39;, (req, res) &#x3D;&gt; &#123;\n&#x2F;&#x2F;   &#x2F;&#x2F; 一. 解析请求参数, id\n&#x2F;&#x2F;   const &#123; id &#125; &#x3D; req.params\n&#x2F;&#x2F;   &#x2F;&#x2F; 二. 操作数据库\n&#x2F;&#x2F;   let sql &#x3D; &#96;select * from users where id&#x3D;$&#123;id&#125;&#96;\n&#x2F;&#x2F;   getOne(sql).then((data) &#x3D;&gt; &#123;\n&#x2F;&#x2F;     res.send(data)\n&#x2F;&#x2F;   &#125;)\n&#x2F;&#x2F; &#125;)\n\napp.get(&#39;&#x2F;users&#x2F;:id&#39;, async (req, res) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 一. 解析请求参数, id\n  const &#123; id &#125; &#x3D; req.params\n  &#x2F;&#x2F; 二. 操作数据库\n  let sql &#x3D; &#96;select * from users where id&#x3D;$&#123;id&#125;&#96;\n  const data &#x3D; await getOne(sql)\n  res.send(data)\n&#125;)\n&#x2F;&#x2F; 4. 监听端口\napp.listen(3000)\n</code></pre>\n<p><a name=\"HZ3KP\"></a></p>\n<h2 id=\"5-使用async…await语法\"><a href=\"#5-使用async…await语法\" class=\"headerlink\" title=\"5 使用async…await语法\"></a>5 使用async…await语法</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 1. 导入express包\nconst express &#x3D; require(&#39;express&#39;)\n\n&#x2F;&#x2F; process是当前node的进程对象. cwd(current working directory)\n&#x2F;&#x2F; 在node中不推荐使用相对路径, 相对路径 相当于 cwd()\n&#x2F;&#x2F; console.log(process.cwd())\n&#x2F;&#x2F; 导入db(数据库操作的包)\n&#x2F;* \ndb &#x3D; &#123;\n  getAll,\n  getById,\n  exec,\n&#125;\n*&#x2F;\n&#x2F;&#x2F; const db &#x3D; require(&#39;.&#x2F;db&#x2F;index&#39;)\nconst &#123; getAll, getById, exec &#125; &#x3D; require(&#39;.&#x2F;db&#x2F;index&#39;)\n&#x2F;&#x2F; 2. 实例化app对象\nconst app &#x3D; express()\n\n&#x2F;&#x2F; 处理请求体的数据. 使用express.json()中间件\napp.use(express.json())\n&#x2F;&#x2F; 3. 路由\n&#x2F;**\n * 获取所有的用户信息\n * GET &#x2F;users\n *&#x2F;\napp.get(&#39;&#x2F;users&#39;, async function (req, res) &#123;\n  &#x2F;&#x2F; 编写sql语句\n  let sql &#x3D; &#39;select * from student&#39;\n  &#x2F;&#x2F; 执行sql语句\n  &#x2F;&#x2F; getAll返回一个promise对象. 调用then方法得到data数据\n  &#x2F;&#x2F; await等待promise返回结果, 将结果作为表达式的值返回\n  const data &#x3D; await getAll(sql)\n  res.send(data)\n&#125;)\n\n&#x2F;**\n * 根据id获取用户信息\n * GET &#x2F;users&#x2F;:id\n *&#x2F;\napp.get(&#39;&#x2F;users&#x2F;:id&#39;, async function (req, res) &#123;\n  &#x2F;&#x2F; 一. 解析请求数据\n  const id &#x3D; req.params.id\n  &#x2F;&#x2F; 二. 操作数据库\n  &#x2F;&#x2F; 2.1 编写sql语句\n  let sql &#x3D; &#96;select * from student where id&#x3D;$&#123;id&#125;&#96;\n  &#x2F;&#x2F; 2.2 执行sql语句\n  const data &#x3D; await getById(sql)\n  res.send(data)\n&#125;)\n\n&#x2F;**\n * 新增用户\n * POST &#x2F;users &#123;name: &#39;test&#39;, age: 20&#125;\n *&#x2F;\napp.post(&#39;&#x2F;users&#39;, async function (req, res) &#123;\n  &#x2F;&#x2F; 一. 解析请求数据\n  console.log(req.body)\n  &#x2F;&#x2F; 对象的解构, 将body对象解构出name和age两个变量\n  const &#123; name, age &#125; &#x3D; req.body\n  &#x2F;&#x2F; console.log(name, age)\n  &#x2F;&#x2F; 二. 操作数据库\n  &#x2F;&#x2F; 2.1 编写sql语句(插入3个点: 表, 字段, 值)\n  let sql &#x3D; &#96;insert into student (name, age) values (&#39;$&#123;name&#125;&#39;, $&#123;age&#125;)&#96;\n  &#x2F;&#x2F; !!!!!!!!!!!!!! 重要调试技巧. 当sql执行出错时, 打印sql, 到控制台执行\n  console.log(sql)\n  &#x2F;&#x2F; 2.2 执行sql语句\n  const data &#x3D; await exec(sql)\n  res.send(&#123;\n    id: data.insertId,\n    name: name,\n    age: age,\n  &#125;)\n&#125;)\n\n&#x2F;**\n * 修改用户\n * PUT &#x2F;users&#x2F;:id &#123;name:&#39;xiaoming-new&#39;, age: 21&#125;\n *&#x2F;\napp.put(&#39;&#x2F;users&#x2F;:id&#39;, async function (req, res) &#123;\n  &#x2F;&#x2F; 一. 解析请求数据\n  const id &#x3D; req.params.id\n  &#x2F;&#x2F; 二. 操作数据库\n  const &#123; name, age &#125; &#x3D; req.body\n  &#x2F;&#x2F; 2.1 编写sql语句(更新4个点 表, 字段, 值, 条件)\n  let sql &#x3D; &#96;update student set name&#x3D;&#39;$&#123;name&#125;&#39;, age&#x3D;$&#123;age&#125; where id&#x3D;$&#123;id&#125;&#96;\n  &#x2F;&#x2F; 2.2 执行sql语句\n  await exec(sql)\n\n  res.send(&#123;\n    id: id,\n    name: name,\n    age: age,\n  &#125;)\n&#125;)\n\n&#x2F;**\n * 删除用户\n * DELETE &#x2F;users&#x2F;:id\n *&#x2F;\napp.delete(&#39;&#x2F;users&#x2F;:id&#39;, async function (req, res) &#123;\n  &#x2F;&#x2F; 一. 解析请求数据\n  const id &#x3D; req.params.id\n  &#x2F;&#x2F; 二. 操作数据库\n  &#x2F;&#x2F; 2.1 编写sql语句\n  let sql &#x3D; &#96;delete from student where id&#x3D;$&#123;id&#125;&#96;\n  &#x2F;&#x2F; 2.2 执行sql语句\n  await exec(sql)\n\n  res.status(204).send(&#39;&#39;)\n&#125;)\n&#x2F;&#x2F; 4. 监听端口\napp.listen(3000)\n</code></pre>\n","text":" 一. Express简介Express 是一个极简而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。Express中文官网 为什么说Express是一个极简的框架 Express的核心只有两个部分 路由 中间...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"服务端","slug":"服务端","count":17,"path":"api/categories/服务端.json"}],"tags":[{"name":"express","slug":"express","count":6,"path":"api/tags/express.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80-Express%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">一. Express简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">1 路由</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">2 中间件</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C-%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">二. 安装及使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">1 安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2 使用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89-%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">三. 路由</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">1 请求方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-URL\"><span class=\"toc-text\">2 URL</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3 处理函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E8%AF%B7%E6%B1%82%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">1) 请求对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">2) 获取请求参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%93%8D%E5%BA%94%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3) 响应对象</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B-%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">四. 中间件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1 中间件类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%BA%94%E7%94%A8%E7%BA%A7%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">2 应用级中间件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%85%A8%E5%B1%80%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">1) 全局中间件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%B1%80%E9%83%A8%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">2) 局部中间件</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E8%B7%AF%E7%94%B1%E7%BA%A7%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">3 路由级中间件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">5 小结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%94-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">五. 数据库操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%AE%89%E8%A3%85mysql%E5%BA%93\"><span class=\"toc-text\">1 安装mysql库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">2 入门案例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E9%9B%86%E6%88%90%E5%88%B0express\"><span class=\"toc-text\">3 集成到express</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%B0%81%E8%A3%85mysql\"><span class=\"toc-text\">4 封装mysql</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E4%BD%BF%E7%94%A8async%E2%80%A6await%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">5 使用async…await语法</span></a></li></ol></li></ol>","author":{"name":"团子","slug":"blog-author","avatar":"https://blog4xk-1309331490.cos.ap-nanjing.myqcloud.com/markdown/QQ%E5%9B%BE%E7%89%8720221205215218.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"一. Vue简介","uid":"50e76213b8e48ed7ab8926d9188dc1c3","slug":"一. Vue简介","date":"2022-12-02T06:17:27.478Z","updated":"2022-12-02T06:21:22.904Z","comments":true,"path":"api/articles/一. Vue简介.json","keywords":null,"cover":null,"text":" 1 什么是Vue:::infoVue是一个动态构建用户界面的** 渐进式** JS框架. 遵循MVVM模式::: 构建用户界面: 将数据转换成界面 渐进式: 自底向上慢慢改进 简单应用: 当成jQuery的代替品 中型应用: 应用组件化, 重构某个(某些)页面 大型应用: 使用...","link":"","photos":[],"count_time":{"symbolsCount":348,"symbolsTime":"1 mins."},"categories":[{"name":"Vue","slug":"Vue","count":16,"path":"api/categories/Vue.json"}],"tags":[{"name":"Vue2基础","slug":"Vue2基础","count":6,"path":"api/tags/Vue2基础.json"}],"author":{"name":"团子","slug":"blog-author","avatar":"https://blog4xk-1309331490.cos.ap-nanjing.myqcloud.com/markdown/QQ%E5%9B%BE%E7%89%8720221205215218.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}}},"next_post":{"title":"33_Todo小项目完成","uid":"67fd54f357341c37b5e6f85e86c46aff","slug":"day33_课堂笔记","date":"2022-12-01T14:20:58.395Z","updated":"2022-12-02T04:26:20.316Z","comments":true,"path":"api/articles/day33_课堂笔记.json","keywords":null,"cover":"https://www.helloimg.com/images/2022/12/02/ZuwHWr.jpg","text":"昨日回顾1,搭建基本环境 2,后台查询所有的功能 3,解决时间显示问题 4,抽取数据库配置信息单独放在一个文件中 5,异常处理 后台实现查询一个 对参数进行判断 新增 返回新增后的数据 先新增,然后拿到新增的id进行查询,将查询的数据返回 修改 跟之前一样,只需要修改内容 删除 ...","link":"","photos":[],"count_time":{"symbolsCount":645,"symbolsTime":"1 mins."},"categories":[{"name":"项目","slug":"项目","count":3,"path":"api/categories/项目.json"}],"tags":[{"name":"Todolist","slug":"Todolist","count":3,"path":"api/tags/Todolist.json"}],"author":{"name":"团子","slug":"blog-author","avatar":"https://blog4xk-1309331490.cos.ap-nanjing.myqcloud.com/markdown/QQ%E5%9B%BE%E7%89%8720221205215218.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}}}}