{"title":"20_闭包_解构_类_promise","uid":"2ffd85dcab5fecc36d930380bb5ac946","slug":"day21_课堂笔记","date":"2022-12-01T13:11:29.368Z","updated":"2022-12-01T13:12:19.818Z","comments":true,"path":"api/articles/day21_课堂笔记.json","keywords":null,"cover":null,"content":"<h4 id=\"昨日回顾\"><a href=\"#昨日回顾\" class=\"headerlink\" title=\"昨日回顾\"></a>昨日回顾</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">作用域\n\t作用\n\t\t限定变量的作用范围\n\t分类\n\t\t全局作用域(script标签,浏览器关闭的时候销毁)\n\t\t局部作用域(函数里面,函数调用完成之后销毁)\n\t\t块级作用域(if,for循环的&#123;&#125;里面,ES6中语法)\n作用域链\n\t概念\n\t\t函数内部可以嵌套函数,每一次嵌套都会形成一个作用域\n\t\t把这些作用域串起来,就形成了作用域链\n\t作用\n\t\t根据&#39;内部函数可以访问外部函数的变量&#39;,使用链式查找来决定哪些数据能被内部函数访问\n\n原型和this指向\n\t解决的问题\t\n\t\t使用this来定义方法,每new一次,就会为对象的方法开辟空间,浪费内存\n\t解决的思路\n\t\t将公共的方法定义到原型对象中(构造函数名.prototype.方法名 &#x3D; 匿名函数)\n\t原型\n\t\t原型对象\n\t\t\t本质\n\t\t\t\t属于构造函数的一个属性,每一个构造函数里面都有\n\t\t\t作用\n\t\t\t\t可以把一些公共的属性或者方法,放在里面,将来创建对象的时候,可以节省内存\n\t\t对象的原型\n\t\t\t本质\n\t\t\t\t属于对象的一个属性,每一个创建出来的对象都有\n\t\t\t作用\n\t\t\t\t为对象查找方法,提供了一个方向\n\t\t\t\t先从构造函数里面找,没有的话,通过对象的原型找到原型对象,\n\t\t\t\t如果没有,就通过原型链找到上一层,一直找到object\n\t\t构造函数\n\t\t\t在原型对象 和 对象的原型,里面都有一个属性constructor,指向构造函数本身\n\t\t\t可以记录该对象引用于哪个构造函数\n\t原型链\n\t\t每一个实例对象,都有一个属性(__proto__),指向构造函数的原型对象,构造函数原型对象也是\n\t\t一个对象,也有__proto__,指向他的上一层,这样就形成了原型链\n\t\t\n\t\t原型链为对象查找和调用方法提供了一条路径\n\t\t\n函数进阶\n\t命名函数\t\t\t函数名调用\t\twindow\n\t匿名函数\t\t\t变量名调用\t\twindow\n\t构造函数\t\t\tnew调用\t\t  创建的实例对象\n\t字面量对象中的方法    字面量对象\t\t 字面量对象\n\t事件中的函数         事件触发调用\t  事件源对象\n\t定时器中的函数       定时调用\t\t   window\n\t立即执行函数\t\t   立即调用         window\n\t\n\t改变函数内this的指向\n\t\tcall\n\t高阶函数\n\t\t也是一个函数(将函数作为参数 或者是 返回值的函数)</code></pre>\n\n<h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">概念\n\t是一个函数,有权访问另外一个函数作用域里面的变量,这个变量所在的函数就叫做闭包\n作用\n\t延伸变量的作用范围,之前定义在函数里面的num只能在函数内部调用,现在可以在外部调用\n应用\n\t立即执行函数(只要在立即执行函数里面的任意一个函数,都可以使用立即执行函数里面的变量)</code></pre>\n\n\n\n<h4 id=\"let和const\"><a href=\"#let和const\" class=\"headerlink\" title=\"let和const\"></a>let和const</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">概念\n\tlet 声明的变量只在 let 命令所在的代码块内有效。\n\tconst 声明一个只读的常量，一旦声明，常量的值就不能改变。\n\t\n区别\n\t\t\t\t\t\tvar\t\t\t\tlet\t\t\t\tconst\n\t作用域\t\t\t\t函数级作用域\t\t块级作用域\t\t块级作用域\n\t变量提升\t\t\t 有\t\t\t\t 没有\t\t\t\t没有\n\t能否被修改\t\t\t可以\t\t\t\t可以\t\t\t  不可以\n\t\n使用场景\n\tlet一般用于定义变化的数据(基本数据类型)\n\tconst一般用于定义引用数据类型\n\t优先选用const 如果数据后面要修改,就选用let</code></pre>\n\n\n\n<h4 id=\"类和继承\"><a href=\"#类和继承\" class=\"headerlink\" title=\"类和继承\"></a>类和继承</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">概念\n\t在ES6中，class (类)作为对象的模板被引入，可以通过 class 关键字定义类。\n\tclass 的本质是 function。\n\t它可以看作一个语法糖，让对象原型的写法更加清晰、更像面向对象编程的语法。\n语法\n\t定义类\n\t\tclass 类名&#123;\n\t\t\tconstructor(参数1,参数2)&#123;\n\t\t\t\tthis.属性名1 &#x3D; 参数1\n\t\t\t\tthis.属性名2 &#x3D; 参数2\n\t\t\t&#125;\n\t\t\t方法名()&#123;\n\t\t\t\t方法体\n\t\t\t&#125;\n\t\t&#125;\n继承\n\tclass A extends B &#123;&#125;\n\t\n静态成员\n\t定义\n\t\t使用static修饰\n\t使用\n\t\t直接用类名调用,无需创建对象</code></pre>\n\n\n\n<h4 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">概念\n\t一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值\n语法\n\t数组\n\t\tconst[变量列表] &#x3D; 要解构的数组\n\t对象\n\t\tconst&#123;变量列表&#125; &#x3D; 要解构的对象\n好处\n\t可以让调用者更方便的提取数组或者对象的值,或者调用里面的属性和方法\n\t\t</code></pre>\n\n\n\n<h4 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">概念\n\t提供了一种更加简洁的函数书写方式\n语法\n\t最简单格式\n\t\t参数 &#x3D;&gt; 函数体 \n\t完整格式\n\t\t(参数1,参数2) &#x3D;&gt; &#123; 函数体 &#125;\n省略格式\n\t如果参数只有一个,()可以省略\n\t如果函数体只有一个语句.&#123;&#125;也可以省略</code></pre>\n\n\n\n<h4 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">概念\n\t本质就是一个对象,对象有属性和方法,他有两个属性和一个方法\n\t一个是状态属性,一个结果属性.方法就是then方法\n创建\n\tconst p &#x3D; new Promise((resovle,reject) &#x3D;&gt; &#123;&#125;)\n属性\n\t状态属性 PromiseState \n        默认值是pending  准备状态,初始状态\n        调用resolve()方法,可以将状态改成完成状态\n        调用reject()方法,可以将状态改成拒绝状态\n       \n    结果属性 PromiseResult\n        默认值是undefined \n        调用方法的时候传一个参数,就可以将参数保存在结果属性中\n方法\n\t接收两个函数,如果p的状态是成功的,就会调用第一个函数,如果是失败的,就会调用第二个函数\n\tthen()方法只有在状态发生改变的时候才会调用\n\t给then方法中的函数加一个参数,就可以拿到结果属性中的值\n\t\nthen返回值\n\t又是一个新的promise对象,可以继续调用then方法,进而实现链式编程\n\t链式编程能够执行的前提条件:第一个promise对象,状态不是pending,必须要发生改变</code></pre>\n\n","text":"昨日回顾作用域 作用 限定变量的作用范围 分类 全局作用域(script标签,浏览器关闭的时候销毁) 局部作用域(函数里面,函数调用完成之后销毁) 块级作用域(if,for循环的&#123;&#125;里面,ES6中语法) 作用域链 概念 函数内部可以嵌套函数,每一次嵌套都会形成...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"前端三剑客","slug":"前端三剑客","count":24,"path":"api/categories/前端三剑客.json"}],"tags":[{"name":"javascript","slug":"javascript","count":16,"path":"api/tags/javascript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%98%A8%E6%97%A5%E5%9B%9E%E9%A1%BE\"><span class=\"toc-text\">昨日回顾</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">闭包</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#let%E5%92%8Cconst\"><span class=\"toc-text\">let和const</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%92%8C%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">类和继承</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">解构赋值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">箭头函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Promise\"><span class=\"toc-text\">Promise</span></a></li></ol>","author":{"name":"团子","slug":"blog-author","avatar":"https://www.helloimg.com/images/2022/12/01/Zu250T.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"22_数据库安装_建表_增删改查","uid":"d0cd3b69cac8d24123497120cff3bdf6","slug":"day22_课堂笔记","date":"2022-12-01T13:22:58.585Z","updated":"2022-12-01T13:49:32.492Z","comments":true,"path":"api/articles/day22_课堂笔记.json","keywords":null,"cover":null,"text":"昨日回顾闭包 概念 是一个函数,有权访问另外一个函数作用域里面的变量,这个变量所在的函数就是闭包 作用 延伸变量的作用范围 应用 立即执行函数 let和const 特点 1,都有块级作用域 2,没有变量提升 3,在同一个域中不能重复定义 4,有暂时性死区 使用场景 1,const...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"后端","slug":"后端","count":14,"path":"api/categories/后端.json"}],"tags":[{"name":"sql","slug":"sql","count":3,"path":"api/tags/sql.json"}],"author":{"name":"团子","slug":"blog-author","avatar":"https://www.helloimg.com/images/2022/12/01/Zu250T.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}}},"next_post":{"title":"20_作用域_原型_函数进阶","uid":"469779a6e8484934bee8ecd3db81351f","slug":"day20_课堂笔记","date":"2022-12-01T13:09:33.617Z","updated":"2022-12-01T13:10:04.218Z","comments":true,"path":"api/articles/day20_课堂笔记.json","keywords":null,"cover":null,"text":"昨日回顾全局对象GO 概念 js引擎整合所有的script标签产生的一个对象,window对象 全局变量 在script标签里面声明的变量 全局函数 在script标签里面声明的函数 关系 全局变量--&gt;GO对象一个属性 全局函数--&gt;GO对象一个方法 活动对象AO ...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"前端三剑客","slug":"前端三剑客","count":24,"path":"api/categories/前端三剑客.json"}],"tags":[{"name":"javascript","slug":"javascript","count":16,"path":"api/tags/javascript.json"}],"author":{"name":"团子","slug":"blog-author","avatar":"https://www.helloimg.com/images/2022/12/01/Zu250T.jpg","link":"/","description":"处变不惊   安之若素","socials":{"github":"https://github.com/codbish","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/bguihiub","juejin":"","customs":{}}}}}